/*! For license information please see main.js.LICENSE.txt */
(()=>{var t={978:(t,n,e)=>{"use strict";e.d(n,{Z:()=>s});var i=e(537),o=e.n(i),r=e(645),a=e.n(r)()(o());a.push([t.id,"*{\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    font-family: 'Hepta Slab', serif;\nfont-family: 'Josefin Sans', sans-serif;\nfont-family: 'Major Mono Display', monospace;\nfont-family: 'Montserrat', sans-serif;\n\n}\n\n.AddNoteInfoDiv{\n    /*Make position absolute and center on page*/\n    display: flex;\n    width: 30vw;\n    height: 60vh;\n\n    flex-direction: column;\n    gap: 20px;\n    justify-content: center;\n    align-items: center;\n    background-color:#F5F5F5;\n    border-radius: 10px;\n    padding: 30px;\n\n    /*Setting position to absolute and moving to the center of the page*/\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    z-index: 1000;\n    \n\n}\n.AddNoteTitleInput{\n    width: 80%;\n    height: 10%;\n    color: #0e0a0a;\n    border: 2px solid #CCCCCC;\n    border-radius: 10px;\n    padding: 3px;\n    background-color: #FFFFFF;\n        \n}\n.AddNoteBodyInput{\n    width: 80%;\n    height: 70%;\n    color: #0e0a0a;\n    border: 2px solid #CCCCCC;\n    border-radius: 10px;\n    padding: 3px;\n    background-color: #FFFFFF;\n}\n\n        \n\n.DoneButton{\n    width: 30%;\n    height: 100%;\n    color: black;\n    border: 2px solid #0e0a0a;\n    border-radius: 10px;\n    justify-self: flex-end;\n    cursor: pointer;\n    background-color: #007BFF;\n}\n.noteButtons{\n    width: 100%;\n    height: 10%;\n    display: flex;\n    justify-content: space-evenly;\n    align-items: center;\n    flex-direction: row;\n    gap: 10px;\n}\n.closeBtn{\n    width: 30%;\n    height: 100%;\n    color: black;\n    border: 2px solid #0e0a0a;\n    border-radius: 10px;\n    justify-self: flex-end;\n    cursor: pointer;\n    background-color: #F5F5F5;\n}\n.closeBtn:hover{\n    border: 2px solid #007BFF;\n\n}\n.AddNoteBodyInput:hover{\n    border: 2px solid #007BFF;\n}\n.AddNoteTitleInput:hover{\n    border: 2px solid #007BFF;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","",{version:3,sources:["webpack://./styles/AddNoteInfo.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;IACV,sBAAsB;IACtB,gCAAgC;AACpC,uCAAuC;AACvC,4CAA4C;AAC5C,qCAAqC;;AAErC;;AAEA;IACI,4CAA4C;IAC5C,aAAa;IACb,WAAW;IACX,YAAY;;IAEZ,sBAAsB;IACtB,SAAS;IACT,uBAAuB;IACvB,mBAAmB;IACnB,wBAAwB;IACxB,mBAAmB;IACnB,aAAa;;IAEb,oEAAoE;IACpE,kBAAkB;IAClB,QAAQ;IACR,SAAS;IACT,gCAAgC;IAChC,aAAa;;;AAGjB;AACA;IACI,UAAU;IACV,WAAW;IACX,cAAc;IACd,yBAAyB;IACzB,mBAAmB;IACnB,YAAY;IACZ,yBAAyB;;AAE7B;AACA;IACI,UAAU;IACV,WAAW;IACX,cAAc;IACd,yBAAyB;IACzB,mBAAmB;IACnB,YAAY;IACZ,yBAAyB;AAC7B;;;;AAIA;IACI,UAAU;IACV,YAAY;IACZ,YAAY;IACZ,yBAAyB;IACzB,mBAAmB;IACnB,sBAAsB;IACtB,eAAe;IACf,yBAAyB;AAC7B;AACA;IACI,WAAW;IACX,WAAW;IACX,aAAa;IACb,6BAA6B;IAC7B,mBAAmB;IACnB,mBAAmB;IACnB,SAAS;AACb;AACA;IACI,UAAU;IACV,YAAY;IACZ,YAAY;IACZ,yBAAyB;IACzB,mBAAmB;IACnB,sBAAsB;IACtB,eAAe;IACf,yBAAyB;AAC7B;AACA;IACI,yBAAyB;;AAE7B;AACA;IACI,yBAAyB;AAC7B;AACA;IACI,yBAAyB;AAC7B",sourcesContent:["*{\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    font-family: 'Hepta Slab', serif;\nfont-family: 'Josefin Sans', sans-serif;\nfont-family: 'Major Mono Display', monospace;\nfont-family: 'Montserrat', sans-serif;\n\n}\n\n.AddNoteInfoDiv{\n    /*Make position absolute and center on page*/\n    display: flex;\n    width: 30vw;\n    height: 60vh;\n\n    flex-direction: column;\n    gap: 20px;\n    justify-content: center;\n    align-items: center;\n    background-color:#F5F5F5;\n    border-radius: 10px;\n    padding: 30px;\n\n    /*Setting position to absolute and moving to the center of the page*/\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    z-index: 1000;\n    \n\n}\n.AddNoteTitleInput{\n    width: 80%;\n    height: 10%;\n    color: #0e0a0a;\n    border: 2px solid #CCCCCC;\n    border-radius: 10px;\n    padding: 3px;\n    background-color: #FFFFFF;\n        \n}\n.AddNoteBodyInput{\n    width: 80%;\n    height: 70%;\n    color: #0e0a0a;\n    border: 2px solid #CCCCCC;\n    border-radius: 10px;\n    padding: 3px;\n    background-color: #FFFFFF;\n}\n\n        \n\n.DoneButton{\n    width: 30%;\n    height: 100%;\n    color: black;\n    border: 2px solid #0e0a0a;\n    border-radius: 10px;\n    justify-self: flex-end;\n    cursor: pointer;\n    background-color: #007BFF;\n}\n.noteButtons{\n    width: 100%;\n    height: 10%;\n    display: flex;\n    justify-content: space-evenly;\n    align-items: center;\n    flex-direction: row;\n    gap: 10px;\n}\n.closeBtn{\n    width: 30%;\n    height: 100%;\n    color: black;\n    border: 2px solid #0e0a0a;\n    border-radius: 10px;\n    justify-self: flex-end;\n    cursor: pointer;\n    background-color: #F5F5F5;\n}\n.closeBtn:hover{\n    border: 2px solid #007BFF;\n\n}\n.AddNoteBodyInput:hover{\n    border: 2px solid #007BFF;\n}\n.AddNoteTitleInput:hover{\n    border: 2px solid #007BFF;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],sourceRoot:""}]);const s=a},790:(t,n,e)=>{"use strict";e.d(n,{Z:()=>s});var i=e(537),o=e.n(i),r=e(645),a=e.n(r)()(o());a.push([t.id,"*{    margin: 0;\n    box-sizing: border-box;\n    font-family: 'Hepta Slab', serif;\nfont-family: 'Josefin Sans', sans-serif;\nfont-family: 'Major Mono Display', monospace;\nfont-family: 'Montserrat', sans-serif;\n\n}\n\n.MainArea{\n    width: 80%;\n    height: 100vh;\n    background-color: #ffffff;\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    overflow: hidden;\n    color: black;\n}\n.MainAreaTitle{\n    width: 100%;\n    height: 30%;\n     padding-top: 10%;\n     display: flex;\n        align-items: center;\n    flex-direction: column;\n    margin-bottom: 1rem;\n}\n.MainAreaMasonry{\n    width: 100%;\n    height: 60%;\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    padding: 2rem 1rem;\n}\n.MainAreaMasonryGridArea{\n    /*Setting up CSS masonry Grid*/\n    width: 100%;\n    height: 100%;\n}\n.NoteToAddNewNotes{\n    width: 15vw;\n    height: 25vh;\n    background-color: #F5F5F5;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    margin: 10px;\n    border-radius: 7px;\n    padding: 10px;\n    /*Adding some box shadow*/\n    box-shadow: 0 0 12px rgba(0,0,0,0.5);\n    transition: all 0.3s ease-in-out;\n    cursor: pointer;\n    font-size: 6rem;\n    border-radius: 7px;\n    cursor: pointer;\n    color: #007BFF;\n    font-weight: 900;\n}\n","",{version:3,sources:["webpack://./styles/MainArea.css"],names:[],mappings:"AAAA,MAAM,SAAS;IACX,sBAAsB;IACtB,gCAAgC;AACpC,uCAAuC;AACvC,4CAA4C;AAC5C,qCAAqC;;AAErC;;AAEA;IACI,UAAU;IACV,aAAa;IACb,yBAAyB;IACzB,aAAa;IACb,mBAAmB;IACnB,sBAAsB;IACtB,gBAAgB;IAChB,YAAY;AAChB;AACA;IACI,WAAW;IACX,WAAW;KACV,gBAAgB;KAChB,aAAa;QACV,mBAAmB;IACvB,sBAAsB;IACtB,mBAAmB;AACvB;AACA;IACI,WAAW;IACX,WAAW;IACX,aAAa;IACb,mBAAmB;IACnB,sBAAsB;IACtB,kBAAkB;AACtB;AACA;IACI,8BAA8B;IAC9B,WAAW;IACX,YAAY;AAChB;AACA;IACI,WAAW;IACX,YAAY;IACZ,yBAAyB;IACzB,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,sBAAsB;IACtB,YAAY;IACZ,kBAAkB;IAClB,aAAa;IACb,yBAAyB;IACzB,oCAAoC;IACpC,gCAAgC;IAChC,eAAe;IACf,eAAe;IACf,kBAAkB;IAClB,eAAe;IACf,cAAc;IACd,gBAAgB;AACpB",sourcesContent:["*{    margin: 0;\n    box-sizing: border-box;\n    font-family: 'Hepta Slab', serif;\nfont-family: 'Josefin Sans', sans-serif;\nfont-family: 'Major Mono Display', monospace;\nfont-family: 'Montserrat', sans-serif;\n\n}\n\n.MainArea{\n    width: 80%;\n    height: 100vh;\n    background-color: #ffffff;\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    overflow: hidden;\n    color: black;\n}\n.MainAreaTitle{\n    width: 100%;\n    height: 30%;\n     padding-top: 10%;\n     display: flex;\n        align-items: center;\n    flex-direction: column;\n    margin-bottom: 1rem;\n}\n.MainAreaMasonry{\n    width: 100%;\n    height: 60%;\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    padding: 2rem 1rem;\n}\n.MainAreaMasonryGridArea{\n    /*Setting up CSS masonry Grid*/\n    width: 100%;\n    height: 100%;\n}\n.NoteToAddNewNotes{\n    width: 15vw;\n    height: 25vh;\n    background-color: #F5F5F5;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    margin: 10px;\n    border-radius: 7px;\n    padding: 10px;\n    /*Adding some box shadow*/\n    box-shadow: 0 0 12px rgba(0,0,0,0.5);\n    transition: all 0.3s ease-in-out;\n    cursor: pointer;\n    font-size: 6rem;\n    border-radius: 7px;\n    cursor: pointer;\n    color: #007BFF;\n    font-weight: 900;\n}\n"],sourceRoot:""}]);const s=a},809:(t,n,e)=>{"use strict";e.d(n,{Z:()=>s});var i=e(537),o=e.n(i),r=e(645),a=e.n(r)()(o());a.push([t.id,"*{   margin: 0;\n    box-sizing: border-box;\n    font-family: 'Hepta Slab', serif;\nfont-family: 'Josefin Sans', sans-serif;\nfont-family: 'Major Mono Display', monospace;\nfont-family: 'Montserrat', sans-serif;\n\n}\n\n.NoteBody{\n    width: 15vw;\n    height: 25vh;\n    background-color: #F5F5F5;\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    margin: 10px;\n    border-radius: 7px;\n    padding: 10px;\n    /*Adding some box shadow*/\n    box-shadow: 0 0 12px rgba(0,0,0,0.5);\n    transition: all 0.3s ease-in-out;\n}\n.NoteBody:hover{\n    transform: scale(1.03);\n}\n.NoteTitle{\n    width: 80%;\n    height: 27%;\n     padding-top: 6%;\n     display: flex;\n        align-items: center;\n    flex-direction: column;\n    color: black;\n    border-radius: 5px;\n}\n.NoteButtonsDiv{\n    /*placing buttons at the bottom of the note*/\n    position: absolute;\n    bottom: 0;\n    width: 100%;\n    height: 15%;\n    border: 2px solid black;\n    display: flex;\n    align-items: center;\n    justify-content: space-evenly;\n    flex-direction: row ;\n    border-radius: 5px;\n    background-color: #007BFF;\n    /*Normal cursor*/\n    cursor: default;\n}\n\n.button{\n    width: 10%;\n    height: 100%;\n\n\n   \n\n    color: black;\n    cursor: pointer;\n}\n.button:hover{\n    width: 15%;\n    background-color: #F5F5F5;\n    color: #007BFF;\n    border:2px solid #F5F5F5;\n}\n.ViewNote{\n    display: flex;\n    width: 30vw;\n    height: 50vh;\n\n    flex-direction: column;\n    gap: 20px;\n    justify-content: center;\n    align-items: center;\n    background-color:#F5F5F5;\n    border-radius: 10px;\n    padding: 30px;\n\n    /*Setting position to absolute and moving to the center of the page*/\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    z-index: 1000;\n    visibility: hidden;\n}\n.ViewNoteDoneButton{\n    width: 30%;\n    height: 10%;\n    color: black;\n    \n    border-radius: 10px;\n    justify-self: flex-end;\n    cursor: pointer;\n    background-color:  #F5F5F5;\n   \n}\n.ViewNoteDoneButton:hover{\n    border: 2px solid #007BFF;\n}\n.NoteContent{\n    /*Make dots to appear at the end of the text overflow*/\n\n    overflow: hidden;\n    text-overflow: ellipsis;\n    height: 40%;\n    display: -webkit-box;\n    -webkit-line-clamp: 10; /* number of lines to show */\n    -webkit-box-orient: vertical;\n    width: 80%;\n}","",{version:3,sources:["webpack://./styles/Note.css"],names:[],mappings:"AAAA,KAAK,SAAS;IACV,sBAAsB;IACtB,gCAAgC;AACpC,uCAAuC;AACvC,4CAA4C;AAC5C,qCAAqC;;AAErC;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,yBAAyB;IACzB,aAAa;IACb,mBAAmB;IACnB,sBAAsB;IACtB,YAAY;IACZ,kBAAkB;IAClB,aAAa;IACb,yBAAyB;IACzB,oCAAoC;IACpC,gCAAgC;AACpC;AACA;IACI,sBAAsB;AAC1B;AACA;IACI,UAAU;IACV,WAAW;KACV,eAAe;KACf,aAAa;QACV,mBAAmB;IACvB,sBAAsB;IACtB,YAAY;IACZ,kBAAkB;AACtB;AACA;IACI,4CAA4C;IAC5C,kBAAkB;IAClB,SAAS;IACT,WAAW;IACX,WAAW;IACX,uBAAuB;IACvB,aAAa;IACb,mBAAmB;IACnB,6BAA6B;IAC7B,oBAAoB;IACpB,kBAAkB;IAClB,yBAAyB;IACzB,gBAAgB;IAChB,eAAe;AACnB;;AAEA;IACI,UAAU;IACV,YAAY;;;;;IAKZ,YAAY;IACZ,eAAe;AACnB;AACA;IACI,UAAU;IACV,yBAAyB;IACzB,cAAc;IACd,wBAAwB;AAC5B;AACA;IACI,aAAa;IACb,WAAW;IACX,YAAY;;IAEZ,sBAAsB;IACtB,SAAS;IACT,uBAAuB;IACvB,mBAAmB;IACnB,wBAAwB;IACxB,mBAAmB;IACnB,aAAa;;IAEb,oEAAoE;IACpE,kBAAkB;IAClB,QAAQ;IACR,SAAS;IACT,gCAAgC;IAChC,aAAa;IACb,kBAAkB;AACtB;AACA;IACI,UAAU;IACV,WAAW;IACX,YAAY;;IAEZ,mBAAmB;IACnB,sBAAsB;IACtB,eAAe;IACf,0BAA0B;;AAE9B;AACA;IACI,yBAAyB;AAC7B;AACA;IACI,sDAAsD;;IAEtD,gBAAgB;IAChB,uBAAuB;IACvB,WAAW;IACX,oBAAoB;IACpB,sBAAsB,EAAE,4BAA4B;IACpD,4BAA4B;IAC5B,UAAU;AACd",sourcesContent:["*{   margin: 0;\n    box-sizing: border-box;\n    font-family: 'Hepta Slab', serif;\nfont-family: 'Josefin Sans', sans-serif;\nfont-family: 'Major Mono Display', monospace;\nfont-family: 'Montserrat', sans-serif;\n\n}\n\n.NoteBody{\n    width: 15vw;\n    height: 25vh;\n    background-color: #F5F5F5;\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    margin: 10px;\n    border-radius: 7px;\n    padding: 10px;\n    /*Adding some box shadow*/\n    box-shadow: 0 0 12px rgba(0,0,0,0.5);\n    transition: all 0.3s ease-in-out;\n}\n.NoteBody:hover{\n    transform: scale(1.03);\n}\n.NoteTitle{\n    width: 80%;\n    height: 27%;\n     padding-top: 6%;\n     display: flex;\n        align-items: center;\n    flex-direction: column;\n    color: black;\n    border-radius: 5px;\n}\n.NoteButtonsDiv{\n    /*placing buttons at the bottom of the note*/\n    position: absolute;\n    bottom: 0;\n    width: 100%;\n    height: 15%;\n    border: 2px solid black;\n    display: flex;\n    align-items: center;\n    justify-content: space-evenly;\n    flex-direction: row ;\n    border-radius: 5px;\n    background-color: #007BFF;\n    /*Normal cursor*/\n    cursor: default;\n}\n\n.button{\n    width: 10%;\n    height: 100%;\n\n\n   \n\n    color: black;\n    cursor: pointer;\n}\n.button:hover{\n    width: 15%;\n    background-color: #F5F5F5;\n    color: #007BFF;\n    border:2px solid #F5F5F5;\n}\n.ViewNote{\n    display: flex;\n    width: 30vw;\n    height: 50vh;\n\n    flex-direction: column;\n    gap: 20px;\n    justify-content: center;\n    align-items: center;\n    background-color:#F5F5F5;\n    border-radius: 10px;\n    padding: 30px;\n\n    /*Setting position to absolute and moving to the center of the page*/\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    z-index: 1000;\n    visibility: hidden;\n}\n.ViewNoteDoneButton{\n    width: 30%;\n    height: 10%;\n    color: black;\n    \n    border-radius: 10px;\n    justify-self: flex-end;\n    cursor: pointer;\n    background-color:  #F5F5F5;\n   \n}\n.ViewNoteDoneButton:hover{\n    border: 2px solid #007BFF;\n}\n.NoteContent{\n    /*Make dots to appear at the end of the text overflow*/\n\n    overflow: hidden;\n    text-overflow: ellipsis;\n    height: 40%;\n    display: -webkit-box;\n    -webkit-line-clamp: 10; /* number of lines to show */\n    -webkit-box-orient: vertical;\n    width: 80%;\n}"],sourceRoot:""}]);const s=a},607:(t,n,e)=>{"use strict";e.d(n,{Z:()=>s});var i=e(537),o=e.n(i),r=e(645),a=e.n(r)()(o());a.push([t.id,"*{   margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    font-family: 'Hepta Slab', serif;\nfont-family: 'Josefin Sans', sans-serif;\nfont-family: 'Major Mono Display', monospace;\nfont-family: 'Montserrat', sans-serif;\n}\n\n.ModalDiv{\n    display: flex;\n    width: 30vw;\n    height: 70vh;\n\n    flex-direction: column;\n    gap: 20px;\n    justify-content: center;\n    align-items: center;\n    background-color:#F5F5F5;\n    border-radius: 10px;\n    padding: 30px;\n\n    /*Setting position to absolute and moving to the center of the page*/\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    z-index: 1000;\n    backdrop-filter: blur(100px);\n    \n}\n/*Editing line edit to recieve title input*/\n.ModalTitleArea{\n    width: 80%;\n    height: 10%;\n    color: #0e0a0a;\n    border: 2px solid #CCCCCC;\n    border-radius: 10px;\n    padding: 3px;\n    background-color: #FFFFFF;\n}\n.ModalDescriptionArea{\n    width: 80%;\n    height: 50%;\n    color: #0e0a0a;\n    border: 2px solid #CCCCCC;\n    border-radius: 10px;\n    padding: 3px;\n    background-color: #FFFFFF;\n}\n.ModalDueDateArea{\n    width: 80%;\n    height: 10%;\n    color: #0e0a0a;\n    border: 2px solid #CCCCCC;\n    border-radius: 10px;\n    padding: 3px;\n    background-color: #FFFFFF;\n}\n.AddButton{\n    width: 30%;\n    height: 90%;\n    color: black;\n    border: 2px solid #0e0a0a;\n    border-radius: 10px;\n    justify-self: flex-end;\n    cursor: pointer;\n    background-color: #007BFF;\n}\n.ButtonsDiv{\n    margin-top: 10px;\n    width: 80%;\n    height: 10%;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    gap: 20px;\n}\n.closeBtn{\n    width: 30%;\n    height: 90%;\n    color: black;\n    \n    border-radius: 10px;\n    justify-self: flex-end;\n    cursor: pointer;\n    background-color:  #F5F5F5;\n   \n}\n.closeBtn:hover{\n    border: 2px solid #007BFF;\n}\n.AddButton:hover{\n    background-color: #3f91e8;\n}\n.ModalDescriptionArea:hover{\n    border: 2px solid #007BFF;\n}\n.ModalDueDateArea:hover{\n    border: 2px solid #007BFF;\n}\n.ModalTitleArea:hover{\n    border: 2px solid #007BFF;\n}\n","",{version:3,sources:["webpack://./styles/addModalInfo.css"],names:[],mappings:"AAAA,KAAK,SAAS;IACV,UAAU;IACV,sBAAsB;IACtB,gCAAgC;AACpC,uCAAuC;AACvC,4CAA4C;AAC5C,qCAAqC;AACrC;;AAEA;IACI,aAAa;IACb,WAAW;IACX,YAAY;;IAEZ,sBAAsB;IACtB,SAAS;IACT,uBAAuB;IACvB,mBAAmB;IACnB,wBAAwB;IACxB,mBAAmB;IACnB,aAAa;;IAEb,oEAAoE;IACpE,kBAAkB;IAClB,QAAQ;IACR,SAAS;IACT,gCAAgC;IAChC,aAAa;IACb,4BAA4B;;AAEhC;AACA,2CAA2C;AAC3C;IACI,UAAU;IACV,WAAW;IACX,cAAc;IACd,yBAAyB;IACzB,mBAAmB;IACnB,YAAY;IACZ,yBAAyB;AAC7B;AACA;IACI,UAAU;IACV,WAAW;IACX,cAAc;IACd,yBAAyB;IACzB,mBAAmB;IACnB,YAAY;IACZ,yBAAyB;AAC7B;AACA;IACI,UAAU;IACV,WAAW;IACX,cAAc;IACd,yBAAyB;IACzB,mBAAmB;IACnB,YAAY;IACZ,yBAAyB;AAC7B;AACA;IACI,UAAU;IACV,WAAW;IACX,YAAY;IACZ,yBAAyB;IACzB,mBAAmB;IACnB,sBAAsB;IACtB,eAAe;IACf,yBAAyB;AAC7B;AACA;IACI,gBAAgB;IAChB,UAAU;IACV,WAAW;IACX,aAAa;IACb,mBAAmB;IACnB,8BAA8B;IAC9B,mBAAmB;IACnB,SAAS;AACb;AACA;IACI,UAAU;IACV,WAAW;IACX,YAAY;;IAEZ,mBAAmB;IACnB,sBAAsB;IACtB,eAAe;IACf,0BAA0B;;AAE9B;AACA;IACI,yBAAyB;AAC7B;AACA;IACI,yBAAyB;AAC7B;AACA;IACI,yBAAyB;AAC7B;AACA;IACI,yBAAyB;AAC7B;AACA;IACI,yBAAyB;AAC7B",sourcesContent:["*{   margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    font-family: 'Hepta Slab', serif;\nfont-family: 'Josefin Sans', sans-serif;\nfont-family: 'Major Mono Display', monospace;\nfont-family: 'Montserrat', sans-serif;\n}\n\n.ModalDiv{\n    display: flex;\n    width: 30vw;\n    height: 70vh;\n\n    flex-direction: column;\n    gap: 20px;\n    justify-content: center;\n    align-items: center;\n    background-color:#F5F5F5;\n    border-radius: 10px;\n    padding: 30px;\n\n    /*Setting position to absolute and moving to the center of the page*/\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    z-index: 1000;\n    backdrop-filter: blur(100px);\n    \n}\n/*Editing line edit to recieve title input*/\n.ModalTitleArea{\n    width: 80%;\n    height: 10%;\n    color: #0e0a0a;\n    border: 2px solid #CCCCCC;\n    border-radius: 10px;\n    padding: 3px;\n    background-color: #FFFFFF;\n}\n.ModalDescriptionArea{\n    width: 80%;\n    height: 50%;\n    color: #0e0a0a;\n    border: 2px solid #CCCCCC;\n    border-radius: 10px;\n    padding: 3px;\n    background-color: #FFFFFF;\n}\n.ModalDueDateArea{\n    width: 80%;\n    height: 10%;\n    color: #0e0a0a;\n    border: 2px solid #CCCCCC;\n    border-radius: 10px;\n    padding: 3px;\n    background-color: #FFFFFF;\n}\n.AddButton{\n    width: 30%;\n    height: 90%;\n    color: black;\n    border: 2px solid #0e0a0a;\n    border-radius: 10px;\n    justify-self: flex-end;\n    cursor: pointer;\n    background-color: #007BFF;\n}\n.ButtonsDiv{\n    margin-top: 10px;\n    width: 80%;\n    height: 10%;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    gap: 20px;\n}\n.closeBtn{\n    width: 30%;\n    height: 90%;\n    color: black;\n    \n    border-radius: 10px;\n    justify-self: flex-end;\n    cursor: pointer;\n    background-color:  #F5F5F5;\n   \n}\n.closeBtn:hover{\n    border: 2px solid #007BFF;\n}\n.AddButton:hover{\n    background-color: #3f91e8;\n}\n.ModalDescriptionArea:hover{\n    border: 2px solid #007BFF;\n}\n.ModalDueDateArea:hover{\n    border: 2px solid #007BFF;\n}\n.ModalTitleArea:hover{\n    border: 2px solid #007BFF;\n}\n"],sourceRoot:""}]);const s=a},753:(t,n,e)=>{"use strict";e.d(n,{Z:()=>s});var i=e(537),o=e.n(i),r=e(645),a=e.n(r)()(o());a.push([t.id,"*{   margin: 0;\n    box-sizing: border-box;\n    font-family: 'Hepta Slab', serif;\n    font-family: 'Josefin Sans', sans-serif;\n    font-family: 'Major Mono Display', monospace;\n    font-family: 'Montserrat', sans-serif;\n\n}\n\n#panel{\n    width: 20%;\n    display: flex;\n    flex-direction: column;\n    padding-left: calc(2% * (30% * 100vh));\n    padding-right: calc(2% * (30% * 100vh));\n    padding-top: 4vh ;\n    padding-bottom: 1vh;\n    padding-left: 2vh;\n    padding-right: 2vh;\n    background-color: #F5F5F5;\n    /*Adding some box shadow*/\n    box-shadow: 0 0 12px rgba(0,0,0,0.5);\n\n}\n#panel-content{\n    height: 80%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    background-color:#F5F5F5;\n    border-radius: 10px;\n    overflow: scroll;\n    padding-top: 1vh;\n    padding-bottom: 1vh;\n\n}\n/*Removing the scroll bar*/\n#panel-content::-webkit-scrollbar {\n    display: none;}\n\n /*Project Title Area*/\n\n .projectTitleArea{\n    padding: 4%;\n    width: 80%;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    border-radius: 10px;\n    margin-bottom: 2vh;\n\n  }\n\n\n.ProjectTitle{\n  color: #181818;\n    margin-bottom: 0.6rem;\n}\n\n.ProjectDivision{\n    width: 70%;\n    background-color: #FFFFFF;\n    border-radius: 5px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    margin-bottom: 1vh;\n    padding-top: 2vh;\n    padding-bottom: 2vh;\n    cursor: pointer;\n    border: 2px solid #CCCCCC;\n    \n\n}\n.ProjectDivision:hover{\n  border: 2px solid #007BFF;\n}\n#btn-icon{\n  /*color the svg to white*/\n  fill: #FFFFFF;\n}\n#logo-div{\n    padding-top: 1.5vh;\n    width: 100%;\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    justify-items: center;\n    align-items: center;\n\n    align-self: flex-end;\n}\n.Btn {\n    width: 50px;\n    height: 50px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border: none;\n    background-color: transparent;\n    position: relative; \n    border-radius: 7px;\n    cursor: pointer;\n    transition: all .3s;\n    background-color: #007BFF;\n    \n  }\n  .Btn:hover {\n    transform: rotate(10deg);\n    transform-origin: bottom;\n    \n  }\n  \n  .svgContainer {\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: transparent;\n    backdrop-filter: blur(0px);\n    letter-spacing: 0.8px;\n    border-radius: 10px;\n    transition: all .3s;\n    border: 1px solid rgba(156, 156, 156, 0.466);\n  }\n  \n  .BG {\n    position: absolute;\n    content: \"\";\n    width: 100%;\n    height: 100%;\n    background-color: #007BFF;\n    z-index: -1;\n    border-radius: 10px;\n    pointer-events: none;\n    transition: all .3s;\n  }\n  \n  .Btn:hover .BG {\n    transform: rotate(10deg);\n    transform-origin: bottom;\n  }\n  \n  .Btn:hover .svgContainer {\n    background-color: rgba(156, 156, 156, 0.466);\n    backdrop-filter: blur(4px);\n  }\n  \n#AddProjectButton:hover{\n  display: flex;\n  flex-direction: row;\n  justify-items: center;\n  justify-content: center;\n  align-items: center;\n  background-color: #007BFF;\n  width: 15%;\n  height: 5%;\n  margin: 2vh auto 3vh auto;\n  cursor:pointer;\n  gap:7px;\n  border-radius: 5px;\n  padding: 5px;\n}\n#AddProjectButton{\n  display: flex;\n  flex-direction: row;\n  justify-items: center;\n  justify-content: center;\n  align-items: center;\n  width: 15%;\n  height: 5%;\n  margin: 2vh auto 3vh auto;\n  cursor:pointer;\n  gap:7px;\n  border-radius: 5px;\n  padding: 5px;\n  border: 2px solid #007BFF;\n}\n#AddProjectButton > img{\n  width: 80%;\n  height: 80%;\n}","",{version:3,sources:["webpack://./styles/panel.css"],names:[],mappings:"AAAA,KAAK,SAAS;IACV,sBAAsB;IACtB,gCAAgC;IAChC,uCAAuC;IACvC,4CAA4C;IAC5C,qCAAqC;;AAEzC;;AAEA;IACI,UAAU;IACV,aAAa;IACb,sBAAsB;IACtB,sCAAsC;IACtC,uCAAuC;IACvC,iBAAiB;IACjB,mBAAmB;IACnB,iBAAiB;IACjB,kBAAkB;IAClB,yBAAyB;IACzB,yBAAyB;IACzB,oCAAoC;;AAExC;AACA;IACI,WAAW;IACX,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,wBAAwB;IACxB,mBAAmB;IACnB,gBAAgB;IAChB,gBAAgB;IAChB,mBAAmB;;AAEvB;AACA,0BAA0B;AAC1B;IACI,aAAa,CAAC;;CAEjB,qBAAqB;;CAErB;IACG,WAAW;IACX,UAAU;IACV,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;IACnB,mBAAmB;IACnB,kBAAkB;;EAEpB;;;AAGF;EACE,cAAc;IACZ,qBAAqB;AACzB;;AAEA;IACI,UAAU;IACV,yBAAyB;IACzB,kBAAkB;IAClB,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,kBAAkB;IAClB,gBAAgB;IAChB,mBAAmB;IACnB,eAAe;IACf,yBAAyB;;;AAG7B;AACA;EACE,yBAAyB;AAC3B;AACA;EACE,yBAAyB;EACzB,aAAa;AACf;AACA;IACI,kBAAkB;IAClB,WAAW;IACX,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,qBAAqB;IACrB,mBAAmB;;IAEnB,oBAAoB;AACxB;AACA;IACI,WAAW;IACX,YAAY;IACZ,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,YAAY;IACZ,6BAA6B;IAC7B,kBAAkB;IAClB,kBAAkB;IAClB,eAAe;IACf,mBAAmB;IACnB,yBAAyB;;EAE3B;EACA;IACE,wBAAwB;IACxB,wBAAwB;;EAE1B;;EAEA;IACE,WAAW;IACX,YAAY;IACZ,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,6BAA6B;IAC7B,0BAA0B;IAC1B,qBAAqB;IACrB,mBAAmB;IACnB,mBAAmB;IACnB,4CAA4C;EAC9C;;EAEA;IACE,kBAAkB;IAClB,WAAW;IACX,WAAW;IACX,YAAY;IACZ,yBAAyB;IACzB,WAAW;IACX,mBAAmB;IACnB,oBAAoB;IACpB,mBAAmB;EACrB;;EAEA;IACE,wBAAwB;IACxB,wBAAwB;EAC1B;;EAEA;IACE,4CAA4C;IAC5C,0BAA0B;EAC5B;;AAEF;EACE,aAAa;EACb,mBAAmB;EACnB,qBAAqB;EACrB,uBAAuB;EACvB,mBAAmB;EACnB,yBAAyB;EACzB,UAAU;EACV,UAAU;EACV,yBAAyB;EACzB,cAAc;EACd,OAAO;EACP,kBAAkB;EAClB,YAAY;AACd;AACA;EACE,aAAa;EACb,mBAAmB;EACnB,qBAAqB;EACrB,uBAAuB;EACvB,mBAAmB;EACnB,UAAU;EACV,UAAU;EACV,yBAAyB;EACzB,cAAc;EACd,OAAO;EACP,kBAAkB;EAClB,YAAY;EACZ,yBAAyB;AAC3B;AACA;EACE,UAAU;EACV,WAAW;AACb",sourcesContent:["*{   margin: 0;\n    box-sizing: border-box;\n    font-family: 'Hepta Slab', serif;\n    font-family: 'Josefin Sans', sans-serif;\n    font-family: 'Major Mono Display', monospace;\n    font-family: 'Montserrat', sans-serif;\n\n}\n\n#panel{\n    width: 20%;\n    display: flex;\n    flex-direction: column;\n    padding-left: calc(2% * (30% * 100vh));\n    padding-right: calc(2% * (30% * 100vh));\n    padding-top: 4vh ;\n    padding-bottom: 1vh;\n    padding-left: 2vh;\n    padding-right: 2vh;\n    background-color: #F5F5F5;\n    /*Adding some box shadow*/\n    box-shadow: 0 0 12px rgba(0,0,0,0.5);\n\n}\n#panel-content{\n    height: 80%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    background-color:#F5F5F5;\n    border-radius: 10px;\n    overflow: scroll;\n    padding-top: 1vh;\n    padding-bottom: 1vh;\n\n}\n/*Removing the scroll bar*/\n#panel-content::-webkit-scrollbar {\n    display: none;}\n\n /*Project Title Area*/\n\n .projectTitleArea{\n    padding: 4%;\n    width: 80%;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    border-radius: 10px;\n    margin-bottom: 2vh;\n\n  }\n\n\n.ProjectTitle{\n  color: #181818;\n    margin-bottom: 0.6rem;\n}\n\n.ProjectDivision{\n    width: 70%;\n    background-color: #FFFFFF;\n    border-radius: 5px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    margin-bottom: 1vh;\n    padding-top: 2vh;\n    padding-bottom: 2vh;\n    cursor: pointer;\n    border: 2px solid #CCCCCC;\n    \n\n}\n.ProjectDivision:hover{\n  border: 2px solid #007BFF;\n}\n#btn-icon{\n  /*color the svg to white*/\n  fill: #FFFFFF;\n}\n#logo-div{\n    padding-top: 1.5vh;\n    width: 100%;\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    justify-items: center;\n    align-items: center;\n\n    align-self: flex-end;\n}\n.Btn {\n    width: 50px;\n    height: 50px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border: none;\n    background-color: transparent;\n    position: relative; \n    border-radius: 7px;\n    cursor: pointer;\n    transition: all .3s;\n    background-color: #007BFF;\n    \n  }\n  .Btn:hover {\n    transform: rotate(10deg);\n    transform-origin: bottom;\n    \n  }\n  \n  .svgContainer {\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: transparent;\n    backdrop-filter: blur(0px);\n    letter-spacing: 0.8px;\n    border-radius: 10px;\n    transition: all .3s;\n    border: 1px solid rgba(156, 156, 156, 0.466);\n  }\n  \n  .BG {\n    position: absolute;\n    content: \"\";\n    width: 100%;\n    height: 100%;\n    background-color: #007BFF;\n    z-index: -1;\n    border-radius: 10px;\n    pointer-events: none;\n    transition: all .3s;\n  }\n  \n  .Btn:hover .BG {\n    transform: rotate(10deg);\n    transform-origin: bottom;\n  }\n  \n  .Btn:hover .svgContainer {\n    background-color: rgba(156, 156, 156, 0.466);\n    backdrop-filter: blur(4px);\n  }\n  \n#AddProjectButton:hover{\n  display: flex;\n  flex-direction: row;\n  justify-items: center;\n  justify-content: center;\n  align-items: center;\n  background-color: #007BFF;\n  width: 15%;\n  height: 5%;\n  margin: 2vh auto 3vh auto;\n  cursor:pointer;\n  gap:7px;\n  border-radius: 5px;\n  padding: 5px;\n}\n#AddProjectButton{\n  display: flex;\n  flex-direction: row;\n  justify-items: center;\n  justify-content: center;\n  align-items: center;\n  width: 15%;\n  height: 5%;\n  margin: 2vh auto 3vh auto;\n  cursor:pointer;\n  gap:7px;\n  border-radius: 5px;\n  padding: 5px;\n  border: 2px solid #007BFF;\n}\n#AddProjectButton > img{\n  width: 80%;\n  height: 80%;\n}"],sourceRoot:""}]);const s=a},792:(t,n,e)=>{"use strict";e.d(n,{Z:()=>s});var i=e(537),o=e.n(i),r=e(645),a=e.n(r)()(o());a.push([t.id,"*{\n    margin: 0;\n    box-sizing: border-box;\n    font-family: 'Hepta Slab', serif;\nfont-family: 'Josefin Sans', sans-serif;\nfont-family: 'Major Mono Display', monospace;\nfont-family: 'Montserrat', sans-serif;\n\n}\n:root{\n    --backgroudColor: white;\n    font-family: 'Hepta Slab', serif;\nfont-family: 'Josefin Sans', sans-serif;\nfont-family: 'Major Mono Display', monospace;\nfont-family: 'Montserrat', sans-serif;\n}\n.mainContent{\n    width: 100vw;\n    height: 100vh;\n    background-color: var(--backgroudColor);\n    display: flex;\n    flex-direction: row;\n    overflow: hidden;\n}\n.Welcome{\n    height: 100vh;\n    width: 80%;\n    /*Fit image to container*/\n    background-position: center;\n    background-repeat: no-repeat;\n    background-size: cover;\n\n    /*blur it out a lil*/\n   \n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n   color: #007BFF;\n   font-size: 2rem;\n\n}","",{version:3,sources:["webpack://./styles/styles.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,sBAAsB;IACtB,gCAAgC;AACpC,uCAAuC;AACvC,4CAA4C;AAC5C,qCAAqC;;AAErC;AACA;IACI,uBAAuB;IACvB,gCAAgC;AACpC,uCAAuC;AACvC,4CAA4C;AAC5C,qCAAqC;AACrC;AACA;IACI,YAAY;IACZ,aAAa;IACb,uCAAuC;IACvC,aAAa;IACb,mBAAmB;IACnB,gBAAgB;AACpB;AACA;IACI,aAAa;IACb,UAAU;IACV,yBAAyB;IACzB,2BAA2B;IAC3B,4BAA4B;IAC5B,sBAAsB;;IAEtB,oBAAoB;;IAEpB,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;GACpB,cAAc;GACd,eAAe;;AAElB",sourcesContent:["*{\n    margin: 0;\n    box-sizing: border-box;\n    font-family: 'Hepta Slab', serif;\nfont-family: 'Josefin Sans', sans-serif;\nfont-family: 'Major Mono Display', monospace;\nfont-family: 'Montserrat', sans-serif;\n\n}\n:root{\n    --backgroudColor: white;\n    font-family: 'Hepta Slab', serif;\nfont-family: 'Josefin Sans', sans-serif;\nfont-family: 'Major Mono Display', monospace;\nfont-family: 'Montserrat', sans-serif;\n}\n.mainContent{\n    width: 100vw;\n    height: 100vh;\n    background-color: var(--backgroudColor);\n    display: flex;\n    flex-direction: row;\n    overflow: hidden;\n}\n.Welcome{\n    height: 100vh;\n    width: 80%;\n    /*Fit image to container*/\n    background-position: center;\n    background-repeat: no-repeat;\n    background-size: cover;\n\n    /*blur it out a lil*/\n   \n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n   color: #007BFF;\n   font-size: 2rem;\n\n}"],sourceRoot:""}]);const s=a},645:t=>{"use strict";t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e="",i=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),i&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=t(n),i&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e})).join("")},n.i=function(t,e,i,o,r){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(i)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(a[d]=!0)}for(var l=0;l<t.length;l++){var A=[].concat(t[l]);i&&a[A[0]]||(void 0!==r&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=r),e&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=e):A[2]=e),o&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=o):A[4]="".concat(o)),n.push(A))}},n}},537:t=>{"use strict";t.exports=function(t){var n=t[1],e=t[3];if(!e)return n;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),r="/*# ".concat(o," */");return[n].concat([r]).join("\n")}return[n].join("\n")}},741:(t,n,e)=>{var i,o;!function(r,a){"use strict";void 0===(o="function"==typeof(i=a)?i.call(n,e,n,t):i)||(t.exports=o)}(window,(function(){"use strict";var t=function(){var t=window.Element.prototype;if(t.matches)return"matches";if(t.matchesSelector)return"matchesSelector";for(var n=["webkit","moz","ms","o"],e=0;e<n.length;e++){var i=n[e]+"MatchesSelector";if(t[i])return i}}();return function(n,e){return n[t](e)}}))},158:function(t,n,e){var i,o;"undefined"!=typeof window&&window,void 0===(o="function"==typeof(i=function(){"use strict";function t(){}var n=t.prototype;return n.on=function(t,n){if(t&&n){var e=this._events=this._events||{},i=e[t]=e[t]||[];return-1==i.indexOf(n)&&i.push(n),this}},n.once=function(t,n){if(t&&n){this.on(t,n);var e=this._onceEvents=this._onceEvents||{};return(e[t]=e[t]||{})[n]=!0,this}},n.off=function(t,n){var e=this._events&&this._events[t];if(e&&e.length){var i=e.indexOf(n);return-1!=i&&e.splice(i,1),this}},n.emitEvent=function(t,n){var e=this._events&&this._events[t];if(e&&e.length){e=e.slice(0),n=n||[];for(var i=this._onceEvents&&this._onceEvents[t],o=0;o<e.length;o++){var r=e[o];i&&i[r]&&(this.off(t,r),delete i[r]),r.apply(this,n)}return this}},n.allOff=function(){delete this._events,delete this._onceEvents},t})?i.call(n,e,n,t):i)||(t.exports=o)},47:(t,n,e)=>{var i,o;!function(r,a){i=[e(741)],o=function(t){return function(t,n){"use strict";var e={extend:function(t,n){for(var e in n)t[e]=n[e];return t},modulo:function(t,n){return(t%n+n)%n}},i=Array.prototype.slice;e.makeArray=function(t){return Array.isArray(t)?t:null==t?[]:"object"==typeof t&&"number"==typeof t.length?i.call(t):[t]},e.removeFrom=function(t,n){var e=t.indexOf(n);-1!=e&&t.splice(e,1)},e.getParent=function(t,e){for(;t.parentNode&&t!=document.body;)if(t=t.parentNode,n(t,e))return t},e.getQueryElement=function(t){return"string"==typeof t?document.querySelector(t):t},e.handleEvent=function(t){var n="on"+t.type;this[n]&&this[n](t)},e.filterFindElements=function(t,i){t=e.makeArray(t);var o=[];return t.forEach((function(t){if(t instanceof HTMLElement)if(i){n(t,i)&&o.push(t);for(var e=t.querySelectorAll(i),r=0;r<e.length;r++)o.push(e[r])}else o.push(t)})),o},e.debounceMethod=function(t,n,e){e=e||100;var i=t.prototype[n],o=n+"Timeout";t.prototype[n]=function(){var t=this[o];clearTimeout(t);var n=arguments,r=this;this[o]=setTimeout((function(){i.apply(r,n),delete r[o]}),e)}},e.docReady=function(t){var n=document.readyState;"complete"==n||"interactive"==n?setTimeout(t):document.addEventListener("DOMContentLoaded",t)},e.toDashed=function(t){return t.replace(/(.)([A-Z])/g,(function(t,n,e){return n+"-"+e})).toLowerCase()};var o=t.console;return e.htmlInit=function(n,i){e.docReady((function(){var r=e.toDashed(i),a="data-"+r,s=document.querySelectorAll("["+a+"]"),d=document.querySelectorAll(".js-"+r),l=e.makeArray(s).concat(e.makeArray(d)),A=a+"-options",c=t.jQuery;l.forEach((function(t){var e,r=t.getAttribute(a)||t.getAttribute(A);try{e=r&&JSON.parse(r)}catch(n){return void(o&&o.error("Error parsing "+a+" on "+t.className+": "+n))}var s=new n(t,e);c&&c.data(t,i,s)}))}))},e}(r,t)}.apply(n,i),void 0===o||(t.exports=o)}(window)},131:(t,n,e)=>{var i,o;window,void 0===(o="function"==typeof(i=function(){"use strict";function t(t){var n=parseFloat(t);return-1==t.indexOf("%")&&!isNaN(n)&&n}var n="undefined"==typeof console?function(){}:function(t){console.error(t)},e=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"],i=e.length;function o(t){var e=getComputedStyle(t);return e||n("Style returned "+e+". Are you running this code in a hidden iframe on Firefox? See https://bit.ly/getsizebug1"),e}var r,a=!1;function s(n){if(function(){if(!a){a=!0;var n=document.createElement("div");n.style.width="200px",n.style.padding="1px 2px 3px 4px",n.style.borderStyle="solid",n.style.borderWidth="1px 2px 3px 4px",n.style.boxSizing="border-box";var e=document.body||document.documentElement;e.appendChild(n);var i=o(n);r=200==Math.round(t(i.width)),s.isBoxSizeOuter=r,e.removeChild(n)}}(),"string"==typeof n&&(n=document.querySelector(n)),n&&"object"==typeof n&&n.nodeType){var d=o(n);if("none"==d.display)return function(){for(var t={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},n=0;n<i;n++)t[e[n]]=0;return t}();var l={};l.width=n.offsetWidth,l.height=n.offsetHeight;for(var A=l.isBorderBox="border-box"==d.boxSizing,c=0;c<i;c++){var u=e[c],h=d[u],f=parseFloat(h);l[u]=isNaN(f)?0:f}var m=l.paddingLeft+l.paddingRight,p=l.paddingTop+l.paddingBottom,g=l.marginLeft+l.marginRight,C=l.marginTop+l.marginBottom,v=l.borderLeftWidth+l.borderRightWidth,B=l.borderTopWidth+l.borderBottomWidth,y=A&&r,b=t(d.width);!1!==b&&(l.width=b+(y?0:m+v));var I=t(d.height);return!1!==I&&(l.height=I+(y?0:p+B)),l.innerWidth=l.width-(m+v),l.innerHeight=l.height-(p+B),l.outerWidth=l.width+g,l.outerHeight=l.height+C,l}}return s})?i.call(n,e,n,t):i)||(t.exports=o)},751:(t,n,e)=>{var i,o,r;window,o=[e(794),e(131)],void 0===(r="function"==typeof(i=function(t,n){"use strict";var e=t.create("masonry");e.compatOptions.fitWidth="isFitWidth";var i=e.prototype;return i._resetLayout=function(){this.getSize(),this._getMeasurement("columnWidth","outerWidth"),this._getMeasurement("gutter","outerWidth"),this.measureColumns(),this.colYs=[];for(var t=0;t<this.cols;t++)this.colYs.push(0);this.maxY=0,this.horizontalColIndex=0},i.measureColumns=function(){if(this.getContainerWidth(),!this.columnWidth){var t=this.items[0],e=t&&t.element;this.columnWidth=e&&n(e).outerWidth||this.containerWidth}var i=this.columnWidth+=this.gutter,o=this.containerWidth+this.gutter,r=o/i,a=i-o%i;r=Math[a&&a<1?"round":"floor"](r),this.cols=Math.max(r,1)},i.getContainerWidth=function(){var t=this._getOption("fitWidth")?this.element.parentNode:this.element,e=n(t);this.containerWidth=e&&e.innerWidth},i._getItemLayoutPosition=function(t){t.getSize();var n=t.size.outerWidth%this.columnWidth,e=Math[n&&n<1?"round":"ceil"](t.size.outerWidth/this.columnWidth);e=Math.min(e,this.cols);for(var i=this[this.options.horizontalOrder?"_getHorizontalColPosition":"_getTopColPosition"](e,t),o={x:this.columnWidth*i.col,y:i.y},r=i.y+t.size.outerHeight,a=e+i.col,s=i.col;s<a;s++)this.colYs[s]=r;return o},i._getTopColPosition=function(t){var n=this._getTopColGroup(t),e=Math.min.apply(Math,n);return{col:n.indexOf(e),y:e}},i._getTopColGroup=function(t){if(t<2)return this.colYs;for(var n=[],e=this.cols+1-t,i=0;i<e;i++)n[i]=this._getColGroupY(i,t);return n},i._getColGroupY=function(t,n){if(n<2)return this.colYs[t];var e=this.colYs.slice(t,t+n);return Math.max.apply(Math,e)},i._getHorizontalColPosition=function(t,n){var e=this.horizontalColIndex%this.cols;e=t>1&&e+t>this.cols?0:e;var i=n.size.outerWidth&&n.size.outerHeight;return this.horizontalColIndex=i?e+t:this.horizontalColIndex,{col:e,y:this._getColGroupY(e,t)}},i._manageStamp=function(t){var e=n(t),i=this._getElementOffset(t),o=this._getOption("originLeft")?i.left:i.right,r=o+e.outerWidth,a=Math.floor(o/this.columnWidth);a=Math.max(0,a);var s=Math.floor(r/this.columnWidth);s-=r%this.columnWidth?0:1,s=Math.min(this.cols-1,s);for(var d=(this._getOption("originTop")?i.top:i.bottom)+e.outerHeight,l=a;l<=s;l++)this.colYs[l]=Math.max(d,this.colYs[l])},i._getContainerSize=function(){this.maxY=Math.max.apply(Math,this.colYs);var t={height:this.maxY};return this._getOption("fitWidth")&&(t.width=this._getContainerFitWidth()),t},i._getContainerFitWidth=function(){for(var t=0,n=this.cols;--n&&0===this.colYs[n];)t++;return(this.cols-t)*this.columnWidth-this.gutter},i.needsResizeLayout=function(){var t=this.containerWidth;return this.getContainerWidth(),t!=this.containerWidth},e})?i.apply(n,o):i)||(t.exports=r)},652:(t,n,e)=>{var i,o,r;window,o=[e(158),e(131)],void 0===(r="function"==typeof(i=function(t,n){"use strict";var e=document.documentElement.style,i="string"==typeof e.transition?"transition":"WebkitTransition",o="string"==typeof e.transform?"transform":"WebkitTransform",r={WebkitTransition:"webkitTransitionEnd",transition:"transitionend"}[i],a={transform:o,transition:i,transitionDuration:i+"Duration",transitionProperty:i+"Property",transitionDelay:i+"Delay"};function s(t,n){t&&(this.element=t,this.layout=n,this.position={x:0,y:0},this._create())}var d=s.prototype=Object.create(t.prototype);d.constructor=s,d._create=function(){this._transn={ingProperties:{},clean:{},onEnd:{}},this.css({position:"absolute"})},d.handleEvent=function(t){var n="on"+t.type;this[n]&&this[n](t)},d.getSize=function(){this.size=n(this.element)},d.css=function(t){var n=this.element.style;for(var e in t)n[a[e]||e]=t[e]},d.getPosition=function(){var t=getComputedStyle(this.element),n=this.layout._getOption("originLeft"),e=this.layout._getOption("originTop"),i=t[n?"left":"right"],o=t[e?"top":"bottom"],r=parseFloat(i),a=parseFloat(o),s=this.layout.size;-1!=i.indexOf("%")&&(r=r/100*s.width),-1!=o.indexOf("%")&&(a=a/100*s.height),r=isNaN(r)?0:r,a=isNaN(a)?0:a,r-=n?s.paddingLeft:s.paddingRight,a-=e?s.paddingTop:s.paddingBottom,this.position.x=r,this.position.y=a},d.layoutPosition=function(){var t=this.layout.size,n={},e=this.layout._getOption("originLeft"),i=this.layout._getOption("originTop"),o=e?"paddingLeft":"paddingRight",r=e?"left":"right",a=e?"right":"left",s=this.position.x+t[o];n[r]=this.getXValue(s),n[a]="";var d=i?"paddingTop":"paddingBottom",l=i?"top":"bottom",A=i?"bottom":"top",c=this.position.y+t[d];n[l]=this.getYValue(c),n[A]="",this.css(n),this.emitEvent("layout",[this])},d.getXValue=function(t){var n=this.layout._getOption("horizontal");return this.layout.options.percentPosition&&!n?t/this.layout.size.width*100+"%":t+"px"},d.getYValue=function(t){var n=this.layout._getOption("horizontal");return this.layout.options.percentPosition&&n?t/this.layout.size.height*100+"%":t+"px"},d._transitionTo=function(t,n){this.getPosition();var e=this.position.x,i=this.position.y,o=t==this.position.x&&n==this.position.y;if(this.setPosition(t,n),!o||this.isTransitioning){var r=t-e,a=n-i,s={};s.transform=this.getTranslate(r,a),this.transition({to:s,onTransitionEnd:{transform:this.layoutPosition},isCleaning:!0})}else this.layoutPosition()},d.getTranslate=function(t,n){return"translate3d("+(t=this.layout._getOption("originLeft")?t:-t)+"px, "+(n=this.layout._getOption("originTop")?n:-n)+"px, 0)"},d.goTo=function(t,n){this.setPosition(t,n),this.layoutPosition()},d.moveTo=d._transitionTo,d.setPosition=function(t,n){this.position.x=parseFloat(t),this.position.y=parseFloat(n)},d._nonTransition=function(t){for(var n in this.css(t.to),t.isCleaning&&this._removeStyles(t.to),t.onTransitionEnd)t.onTransitionEnd[n].call(this)},d.transition=function(t){if(parseFloat(this.layout.options.transitionDuration)){var n=this._transn;for(var e in t.onTransitionEnd)n.onEnd[e]=t.onTransitionEnd[e];for(e in t.to)n.ingProperties[e]=!0,t.isCleaning&&(n.clean[e]=!0);t.from&&(this.css(t.from),this.element.offsetHeight),this.enableTransition(t.to),this.css(t.to),this.isTransitioning=!0}else this._nonTransition(t)};var l="opacity,"+o.replace(/([A-Z])/g,(function(t){return"-"+t.toLowerCase()}));d.enableTransition=function(){if(!this.isTransitioning){var t=this.layout.options.transitionDuration;t="number"==typeof t?t+"ms":t,this.css({transitionProperty:l,transitionDuration:t,transitionDelay:this.staggerDelay||0}),this.element.addEventListener(r,this,!1)}},d.onwebkitTransitionEnd=function(t){this.ontransitionend(t)},d.onotransitionend=function(t){this.ontransitionend(t)};var A={"-webkit-transform":"transform"};d.ontransitionend=function(t){if(t.target===this.element){var n=this._transn,e=A[t.propertyName]||t.propertyName;delete n.ingProperties[e],function(t){for(var n in t)return!1;return!0}(n.ingProperties)&&this.disableTransition(),e in n.clean&&(this.element.style[t.propertyName]="",delete n.clean[e]),e in n.onEnd&&(n.onEnd[e].call(this),delete n.onEnd[e]),this.emitEvent("transitionEnd",[this])}},d.disableTransition=function(){this.removeTransitionStyles(),this.element.removeEventListener(r,this,!1),this.isTransitioning=!1},d._removeStyles=function(t){var n={};for(var e in t)n[e]="";this.css(n)};var c={transitionProperty:"",transitionDuration:"",transitionDelay:""};return d.removeTransitionStyles=function(){this.css(c)},d.stagger=function(t){t=isNaN(t)?0:t,this.staggerDelay=t+"ms"},d.removeElem=function(){this.element.parentNode.removeChild(this.element),this.css({display:""}),this.emitEvent("remove",[this])},d.remove=function(){i&&parseFloat(this.layout.options.transitionDuration)?(this.once("transitionEnd",(function(){this.removeElem()})),this.hide()):this.removeElem()},d.reveal=function(){delete this.isHidden,this.css({display:""});var t=this.layout.options,n={};n[this.getHideRevealTransitionEndProperty("visibleStyle")]=this.onRevealTransitionEnd,this.transition({from:t.hiddenStyle,to:t.visibleStyle,isCleaning:!0,onTransitionEnd:n})},d.onRevealTransitionEnd=function(){this.isHidden||this.emitEvent("reveal")},d.getHideRevealTransitionEndProperty=function(t){var n=this.layout.options[t];if(n.opacity)return"opacity";for(var e in n)return e},d.hide=function(){this.isHidden=!0,this.css({display:""});var t=this.layout.options,n={};n[this.getHideRevealTransitionEndProperty("hiddenStyle")]=this.onHideTransitionEnd,this.transition({from:t.visibleStyle,to:t.hiddenStyle,isCleaning:!0,onTransitionEnd:n})},d.onHideTransitionEnd=function(){this.isHidden&&(this.css({display:"none"}),this.emitEvent("hide"))},d.destroy=function(){this.css({position:"",left:"",right:"",top:"",bottom:"",transition:"",transform:""})},s})?i.apply(n,o):i)||(t.exports=r)},794:(t,n,e)=>{var i,o;!function(r,a){"use strict";i=[e(158),e(131),e(47),e(652)],o=function(t,n,e,i){return function(t,n,e,i,o){var r=t.console,a=t.jQuery,s=function(){},d=0,l={};function A(t,n){var e=i.getQueryElement(t);if(e){this.element=e,a&&(this.$element=a(this.element)),this.options=i.extend({},this.constructor.defaults),this.option(n);var o=++d;this.element.outlayerGUID=o,l[o]=this,this._create(),this._getOption("initLayout")&&this.layout()}else r&&r.error("Bad element for "+this.constructor.namespace+": "+(e||t))}A.namespace="outlayer",A.Item=o,A.defaults={containerStyle:{position:"relative"},initLayout:!0,originLeft:!0,originTop:!0,resize:!0,resizeContainer:!0,transitionDuration:"0.4s",hiddenStyle:{opacity:0,transform:"scale(0.001)"},visibleStyle:{opacity:1,transform:"scale(1)"}};var c=A.prototype;function u(t){function n(){t.apply(this,arguments)}return n.prototype=Object.create(t.prototype),n.prototype.constructor=n,n}i.extend(c,n.prototype),c.option=function(t){i.extend(this.options,t)},c._getOption=function(t){var n=this.constructor.compatOptions[t];return n&&void 0!==this.options[n]?this.options[n]:this.options[t]},A.compatOptions={initLayout:"isInitLayout",horizontal:"isHorizontal",layoutInstant:"isLayoutInstant",originLeft:"isOriginLeft",originTop:"isOriginTop",resize:"isResizeBound",resizeContainer:"isResizingContainer"},c._create=function(){this.reloadItems(),this.stamps=[],this.stamp(this.options.stamp),i.extend(this.element.style,this.options.containerStyle),this._getOption("resize")&&this.bindResize()},c.reloadItems=function(){this.items=this._itemize(this.element.children)},c._itemize=function(t){for(var n=this._filterFindItemElements(t),e=this.constructor.Item,i=[],o=0;o<n.length;o++){var r=new e(n[o],this);i.push(r)}return i},c._filterFindItemElements=function(t){return i.filterFindElements(t,this.options.itemSelector)},c.getItemElements=function(){return this.items.map((function(t){return t.element}))},c.layout=function(){this._resetLayout(),this._manageStamps();var t=this._getOption("layoutInstant"),n=void 0!==t?t:!this._isLayoutInited;this.layoutItems(this.items,n),this._isLayoutInited=!0},c._init=c.layout,c._resetLayout=function(){this.getSize()},c.getSize=function(){this.size=e(this.element)},c._getMeasurement=function(t,n){var i,o=this.options[t];o?("string"==typeof o?i=this.element.querySelector(o):o instanceof HTMLElement&&(i=o),this[t]=i?e(i)[n]:o):this[t]=0},c.layoutItems=function(t,n){t=this._getItemsForLayout(t),this._layoutItems(t,n),this._postLayout()},c._getItemsForLayout=function(t){return t.filter((function(t){return!t.isIgnored}))},c._layoutItems=function(t,n){if(this._emitCompleteOnItems("layout",t),t&&t.length){var e=[];t.forEach((function(t){var i=this._getItemLayoutPosition(t);i.item=t,i.isInstant=n||t.isLayoutInstant,e.push(i)}),this),this._processLayoutQueue(e)}},c._getItemLayoutPosition=function(){return{x:0,y:0}},c._processLayoutQueue=function(t){this.updateStagger(),t.forEach((function(t,n){this._positionItem(t.item,t.x,t.y,t.isInstant,n)}),this)},c.updateStagger=function(){var t=this.options.stagger;if(null!=t)return this.stagger=function(t){if("number"==typeof t)return t;var n=t.match(/(^\d*\.?\d*)(\w*)/),e=n&&n[1],i=n&&n[2];return e.length?(e=parseFloat(e))*(h[i]||1):0}(t),this.stagger;this.stagger=0},c._positionItem=function(t,n,e,i,o){i?t.goTo(n,e):(t.stagger(o*this.stagger),t.moveTo(n,e))},c._postLayout=function(){this.resizeContainer()},c.resizeContainer=function(){if(this._getOption("resizeContainer")){var t=this._getContainerSize();t&&(this._setContainerMeasure(t.width,!0),this._setContainerMeasure(t.height,!1))}},c._getContainerSize=s,c._setContainerMeasure=function(t,n){if(void 0!==t){var e=this.size;e.isBorderBox&&(t+=n?e.paddingLeft+e.paddingRight+e.borderLeftWidth+e.borderRightWidth:e.paddingBottom+e.paddingTop+e.borderTopWidth+e.borderBottomWidth),t=Math.max(t,0),this.element.style[n?"width":"height"]=t+"px"}},c._emitCompleteOnItems=function(t,n){var e=this;function i(){e.dispatchEvent(t+"Complete",null,[n])}var o=n.length;if(n&&o){var r=0;n.forEach((function(n){n.once(t,a)}))}else i();function a(){++r==o&&i()}},c.dispatchEvent=function(t,n,e){var i=n?[n].concat(e):e;if(this.emitEvent(t,i),a)if(this.$element=this.$element||a(this.element),n){var o=a.Event(n);o.type=t,this.$element.trigger(o,e)}else this.$element.trigger(t,e)},c.ignore=function(t){var n=this.getItem(t);n&&(n.isIgnored=!0)},c.unignore=function(t){var n=this.getItem(t);n&&delete n.isIgnored},c.stamp=function(t){(t=this._find(t))&&(this.stamps=this.stamps.concat(t),t.forEach(this.ignore,this))},c.unstamp=function(t){(t=this._find(t))&&t.forEach((function(t){i.removeFrom(this.stamps,t),this.unignore(t)}),this)},c._find=function(t){if(t)return"string"==typeof t&&(t=this.element.querySelectorAll(t)),i.makeArray(t)},c._manageStamps=function(){this.stamps&&this.stamps.length&&(this._getBoundingRect(),this.stamps.forEach(this._manageStamp,this))},c._getBoundingRect=function(){var t=this.element.getBoundingClientRect(),n=this.size;this._boundingRect={left:t.left+n.paddingLeft+n.borderLeftWidth,top:t.top+n.paddingTop+n.borderTopWidth,right:t.right-(n.paddingRight+n.borderRightWidth),bottom:t.bottom-(n.paddingBottom+n.borderBottomWidth)}},c._manageStamp=s,c._getElementOffset=function(t){var n=t.getBoundingClientRect(),i=this._boundingRect,o=e(t);return{left:n.left-i.left-o.marginLeft,top:n.top-i.top-o.marginTop,right:i.right-n.right-o.marginRight,bottom:i.bottom-n.bottom-o.marginBottom}},c.handleEvent=i.handleEvent,c.bindResize=function(){t.addEventListener("resize",this),this.isResizeBound=!0},c.unbindResize=function(){t.removeEventListener("resize",this),this.isResizeBound=!1},c.onresize=function(){this.resize()},i.debounceMethod(A,"onresize",100),c.resize=function(){this.isResizeBound&&this.needsResizeLayout()&&this.layout()},c.needsResizeLayout=function(){var t=e(this.element);return this.size&&t&&t.innerWidth!==this.size.innerWidth},c.addItems=function(t){var n=this._itemize(t);return n.length&&(this.items=this.items.concat(n)),n},c.appended=function(t){var n=this.addItems(t);n.length&&(this.layoutItems(n,!0),this.reveal(n))},c.prepended=function(t){var n=this._itemize(t);if(n.length){var e=this.items.slice(0);this.items=n.concat(e),this._resetLayout(),this._manageStamps(),this.layoutItems(n,!0),this.reveal(n),this.layoutItems(e)}},c.reveal=function(t){if(this._emitCompleteOnItems("reveal",t),t&&t.length){var n=this.updateStagger();t.forEach((function(t,e){t.stagger(e*n),t.reveal()}))}},c.hide=function(t){if(this._emitCompleteOnItems("hide",t),t&&t.length){var n=this.updateStagger();t.forEach((function(t,e){t.stagger(e*n),t.hide()}))}},c.revealItemElements=function(t){var n=this.getItems(t);this.reveal(n)},c.hideItemElements=function(t){var n=this.getItems(t);this.hide(n)},c.getItem=function(t){for(var n=0;n<this.items.length;n++){var e=this.items[n];if(e.element==t)return e}},c.getItems=function(t){t=i.makeArray(t);var n=[];return t.forEach((function(t){var e=this.getItem(t);e&&n.push(e)}),this),n},c.remove=function(t){var n=this.getItems(t);this._emitCompleteOnItems("remove",n),n&&n.length&&n.forEach((function(t){t.remove(),i.removeFrom(this.items,t)}),this)},c.destroy=function(){var t=this.element.style;t.height="",t.position="",t.width="",this.items.forEach((function(t){t.destroy()})),this.unbindResize();var n=this.element.outlayerGUID;delete l[n],delete this.element.outlayerGUID,a&&a.removeData(this.element,this.constructor.namespace)},A.data=function(t){var n=(t=i.getQueryElement(t))&&t.outlayerGUID;return n&&l[n]},A.create=function(t,n){var e=u(A);return e.defaults=i.extend({},A.defaults),i.extend(e.defaults,n),e.compatOptions=i.extend({},A.compatOptions),e.namespace=t,e.data=A.data,e.Item=u(o),i.htmlInit(e,t),a&&a.bridget&&a.bridget(t,e),e};var h={ms:1,s:1e3};return A.Item=o,A}(r,t,n,e,i)}.apply(n,i),void 0===o||(t.exports=o)}(window)},379:t=>{"use strict";var n=[];function e(t){for(var e=-1,i=0;i<n.length;i++)if(n[i].identifier===t){e=i;break}return e}function i(t,i){for(var r={},a=[],s=0;s<t.length;s++){var d=t[s],l=i.base?d[0]+i.base:d[0],A=r[l]||0,c="".concat(l," ").concat(A);r[l]=A+1;var u=e(c),h={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==u)n[u].references++,n[u].updater(h);else{var f=o(h,i);i.byIndex=s,n.splice(s,0,{identifier:c,updater:f,references:1})}a.push(c)}return a}function o(t,n){var e=n.domAPI(n);return e.update(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap&&n.supports===t.supports&&n.layer===t.layer)return;e.update(t=n)}else e.remove()}}t.exports=function(t,o){var r=i(t=t||[],o=o||{});return function(t){t=t||[];for(var a=0;a<r.length;a++){var s=e(r[a]);n[s].references--}for(var d=i(t,o),l=0;l<r.length;l++){var A=e(r[l]);0===n[A].references&&(n[A].updater(),n.splice(A,1))}r=d}}},569:t=>{"use strict";var n={};t.exports=function(t,e){var i=function(t){if(void 0===n[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}n[t]=e}return n[t]}(t);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(e)}},216:t=>{"use strict";t.exports=function(t){var n=document.createElement("style");return t.setAttributes(n,t.attributes),t.insert(n,t.options),n}},565:(t,n,e)=>{"use strict";t.exports=function(t){var n=e.nc;n&&t.setAttribute("nonce",n)}},795:t=>{"use strict";t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=t.insertStyleElement(t);return{update:function(e){!function(t,n,e){var i="";e.supports&&(i+="@supports (".concat(e.supports,") {")),e.media&&(i+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(i+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),i+=e.css,o&&(i+="}"),e.media&&(i+="}"),e.supports&&(i+="}");var r=e.sourceMap;r&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),n.styleTagTransform(i,t,n.options)}(n,t,e)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)}}}},589:t=>{"use strict";t.exports=function(t,n){if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}}},n={};function e(i){var o=n[i];if(void 0!==o)return o.exports;var r=n[i]={id:i,exports:{}};return t[i].call(r.exports,r,r.exports,e),r.exports}e.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return e.d(n,{a:n}),n},e.d=(t,n)=>{for(var i in n)e.o(n,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:n[i]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var n=e.g.document;if(!t&&n&&(n.currentScript&&(t=n.currentScript.src),!t)){var i=n.getElementsByTagName("script");if(i.length)for(var o=i.length-1;o>-1&&!t;)t=i[o--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})(),e.nc=void 0,(()=>{"use strict";var t=e(379),n=e.n(t),i=e(795),o=e.n(i),r=e(569),a=e.n(r),s=e(565),d=e.n(s),l=e(216),A=e.n(l),c=e(589),u=e.n(c),h=e(792),f={};f.styleTagTransform=u(),f.setAttributes=d(),f.insert=a().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=A(),n()(h.Z,f),h.Z&&h.Z.locals&&h.Z.locals;var m=e(753),p={};p.styleTagTransform=u(),p.setAttributes=d(),p.insert=a().bind(null,"head"),p.domAPI=o(),p.insertStyleElement=A(),n()(m.Z,p),m.Z&&m.Z.locals&&m.Z.locals;var g=e(790),C={};C.styleTagTransform=u(),C.setAttributes=d(),C.insert=a().bind(null,"head"),C.domAPI=o(),C.insertStyleElement=A(),n()(g.Z,C),g.Z&&g.Z.locals&&g.Z.locals;var v=e(607),B={};B.styleTagTransform=u(),B.setAttributes=d(),B.insert=a().bind(null,"head"),B.domAPI=o(),B.insertStyleElement=A(),n()(v.Z,B),v.Z&&v.Z.locals&&v.Z.locals;class y{constructor(){this.ModalTitleArea=document.createElement("input"),this.ModalTitleArea.setAttribute("class","ModalTitleArea"),this.ModalTitleArea.setAttribute("placeholder","Enter title"),this.ModalTitleArea.setAttribute("type","text"),this.ModalTitleArea.setAttribute("maxlength","10"),this.ModalDescriptionArea=document.createElement("input"),this.ModalDescriptionArea.setAttribute("class","ModalDescriptionArea"),this.ModalDescriptionArea.setAttribute("placeholder","Enter description"),this.ModalDescriptionArea.setAttribute("type","text"),this.ModalDescriptionArea.setAttribute("maxlength","50"),this.ModalDueDateArea=document.createElement("input"),this.ModalDueDateArea.setAttribute("class","ModalDueDateArea"),this.ModalDueDateArea.setAttribute("placeholder","Enter due date"),this.ModalDueDateArea.setAttribute("type","date"),this.ModalDiv=document.createElement("div"),this.ModalDiv.setAttribute("class","ModalDiv"),this.AddButton=document.createElement("button"),this.AddButton.setAttribute("class","AddButton"),this.AddButton.innerHTML="Add",this.title=document.createElement("h3"),this.title.setAttribute("class","title"),this.title.innerHTML="Add New Project",this.title.style.color="white",this.title.style.color="black",this.ButtonsDiv=document.createElement("div"),this.ButtonsDiv.setAttribute("class","ButtonsDiv"),this.closeBtn=document.createElement("button"),this.closeBtn.setAttribute("class","closeBtn"),this.closeBtn.innerHTML="close",this.ButtonsDiv.appendChild(this.closeBtn),this.ButtonsDiv.appendChild(this.AddButton),this.ModalDiv.appendChild(this.title),this.ModalDiv.appendChild(this.ModalTitleArea),this.ModalDiv.appendChild(this.ModalDescriptionArea),this.ModalDiv.appendChild(this.ModalDueDateArea),this.ModalDiv.appendChild(this.ButtonsDiv)}requestInfo(){return[this.ModalTitleArea.value,this.ModalDescriptionArea.value,this.ModalDueDateArea.value]}}var b=e(809),I={};function w(t){return w="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},w(t)}function x(t,n){if(n.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+n.length+" present")}function M(t){x(1,arguments);var n=Object.prototype.toString.call(t);return t instanceof Date||"object"===w(t)&&"[object Date]"===n?new Date(t.getTime()):"number"==typeof t||"[object Number]"===n?new Date(t):("string"!=typeof t&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function E(t){if(null===t||!0===t||!1===t)return NaN;var n=Number(t);return isNaN(n)?n:n<0?Math.ceil(n):Math.floor(n)}function T(t){x(1,arguments);var n=M(t),e=n.getUTCDay(),i=(e<1?7:0)+e-1;return n.setUTCDate(n.getUTCDate()-i),n.setUTCHours(0,0,0,0),n}function F(t){x(1,arguments);var n=M(t),e=n.getUTCFullYear(),i=new Date(0);i.setUTCFullYear(e+1,0,4),i.setUTCHours(0,0,0,0);var o=T(i),r=new Date(0);r.setUTCFullYear(e,0,4),r.setUTCHours(0,0,0,0);var a=T(r);return n.getTime()>=o.getTime()?e+1:n.getTime()>=a.getTime()?e:e-1}I.styleTagTransform=u(),I.setAttributes=d(),I.insert=a().bind(null,"head"),I.domAPI=o(),I.insertStyleElement=A(),n()(b.Z,I),b.Z&&b.Z.locals&&b.Z.locals;var N={};function k(){return N}function S(t,n){var e,i,o,r,a,s,d,l;x(1,arguments);var A=k(),c=E(null!==(e=null!==(i=null!==(o=null!==(r=null==n?void 0:n.weekStartsOn)&&void 0!==r?r:null==n||null===(a=n.locale)||void 0===a||null===(s=a.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==o?o:A.weekStartsOn)&&void 0!==i?i:null===(d=A.locale)||void 0===d||null===(l=d.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==e?e:0);if(!(c>=0&&c<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var u=M(t),h=u.getUTCDay(),f=(h<c?7:0)+h-c;return u.setUTCDate(u.getUTCDate()-f),u.setUTCHours(0,0,0,0),u}function D(t,n){var e,i,o,r,a,s,d,l;x(1,arguments);var A=M(t),c=A.getUTCFullYear(),u=k(),h=E(null!==(e=null!==(i=null!==(o=null!==(r=null==n?void 0:n.firstWeekContainsDate)&&void 0!==r?r:null==n||null===(a=n.locale)||void 0===a||null===(s=a.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==o?o:u.firstWeekContainsDate)&&void 0!==i?i:null===(d=u.locale)||void 0===d||null===(l=d.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==e?e:1);if(!(h>=1&&h<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var f=new Date(0);f.setUTCFullYear(c+1,0,h),f.setUTCHours(0,0,0,0);var m=S(f,n),p=new Date(0);p.setUTCFullYear(c,0,h),p.setUTCHours(0,0,0,0);var g=S(p,n);return A.getTime()>=m.getTime()?c+1:A.getTime()>=g.getTime()?c:c-1}function W(t,n){for(var e=t<0?"-":"",i=Math.abs(t).toString();i.length<n;)i="0"+i;return e+i}const P=function(t,n){var e=t.getUTCFullYear(),i=e>0?e:1-e;return W("yy"===n?i%100:i,n.length)},j=function(t,n){var e=t.getUTCMonth();return"M"===n?String(e+1):W(e+1,2)},z=function(t,n){return W(t.getUTCDate(),n.length)},L=function(t,n){return W(t.getUTCHours()%12||12,n.length)},U=function(t,n){return W(t.getUTCHours(),n.length)},Y=function(t,n){return W(t.getUTCMinutes(),n.length)},_=function(t,n){return W(t.getUTCSeconds(),n.length)},O=function(t,n){var e=n.length,i=t.getUTCMilliseconds();return W(Math.floor(i*Math.pow(10,e-3)),n.length)};var V={G:function(t,n,e){var i=t.getUTCFullYear()>0?1:0;switch(n){case"G":case"GG":case"GGG":return e.era(i,{width:"abbreviated"});case"GGGGG":return e.era(i,{width:"narrow"});default:return e.era(i,{width:"wide"})}},y:function(t,n,e){if("yo"===n){var i=t.getUTCFullYear(),o=i>0?i:1-i;return e.ordinalNumber(o,{unit:"year"})}return P(t,n)},Y:function(t,n,e,i){var o=D(t,i),r=o>0?o:1-o;return"YY"===n?W(r%100,2):"Yo"===n?e.ordinalNumber(r,{unit:"year"}):W(r,n.length)},R:function(t,n){return W(F(t),n.length)},u:function(t,n){return W(t.getUTCFullYear(),n.length)},Q:function(t,n,e){var i=Math.ceil((t.getUTCMonth()+1)/3);switch(n){case"Q":return String(i);case"QQ":return W(i,2);case"Qo":return e.ordinalNumber(i,{unit:"quarter"});case"QQQ":return e.quarter(i,{width:"abbreviated",context:"formatting"});case"QQQQQ":return e.quarter(i,{width:"narrow",context:"formatting"});default:return e.quarter(i,{width:"wide",context:"formatting"})}},q:function(t,n,e){var i=Math.ceil((t.getUTCMonth()+1)/3);switch(n){case"q":return String(i);case"qq":return W(i,2);case"qo":return e.ordinalNumber(i,{unit:"quarter"});case"qqq":return e.quarter(i,{width:"abbreviated",context:"standalone"});case"qqqqq":return e.quarter(i,{width:"narrow",context:"standalone"});default:return e.quarter(i,{width:"wide",context:"standalone"})}},M:function(t,n,e){var i=t.getUTCMonth();switch(n){case"M":case"MM":return j(t,n);case"Mo":return e.ordinalNumber(i+1,{unit:"month"});case"MMM":return e.month(i,{width:"abbreviated",context:"formatting"});case"MMMMM":return e.month(i,{width:"narrow",context:"formatting"});default:return e.month(i,{width:"wide",context:"formatting"})}},L:function(t,n,e){var i=t.getUTCMonth();switch(n){case"L":return String(i+1);case"LL":return W(i+1,2);case"Lo":return e.ordinalNumber(i+1,{unit:"month"});case"LLL":return e.month(i,{width:"abbreviated",context:"standalone"});case"LLLLL":return e.month(i,{width:"narrow",context:"standalone"});default:return e.month(i,{width:"wide",context:"standalone"})}},w:function(t,n,e,i){var o=function(t,n){x(1,arguments);var e=M(t),i=S(e,n).getTime()-function(t,n){var e,i,o,r,a,s,d,l;x(1,arguments);var A=k(),c=E(null!==(e=null!==(i=null!==(o=null!==(r=null==n?void 0:n.firstWeekContainsDate)&&void 0!==r?r:null==n||null===(a=n.locale)||void 0===a||null===(s=a.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==o?o:A.firstWeekContainsDate)&&void 0!==i?i:null===(d=A.locale)||void 0===d||null===(l=d.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==e?e:1),u=D(t,n),h=new Date(0);return h.setUTCFullYear(u,0,c),h.setUTCHours(0,0,0,0),S(h,n)}(e,n).getTime();return Math.round(i/6048e5)+1}(t,i);return"wo"===n?e.ordinalNumber(o,{unit:"week"}):W(o,n.length)},I:function(t,n,e){var i=function(t){x(1,arguments);var n=M(t),e=T(n).getTime()-function(t){x(1,arguments);var n=F(t),e=new Date(0);return e.setUTCFullYear(n,0,4),e.setUTCHours(0,0,0,0),T(e)}(n).getTime();return Math.round(e/6048e5)+1}(t);return"Io"===n?e.ordinalNumber(i,{unit:"week"}):W(i,n.length)},d:function(t,n,e){return"do"===n?e.ordinalNumber(t.getUTCDate(),{unit:"date"}):z(t,n)},D:function(t,n,e){var i=function(t){x(1,arguments);var n=M(t),e=n.getTime();n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0);var i=e-n.getTime();return Math.floor(i/864e5)+1}(t);return"Do"===n?e.ordinalNumber(i,{unit:"dayOfYear"}):W(i,n.length)},E:function(t,n,e){var i=t.getUTCDay();switch(n){case"E":case"EE":case"EEE":return e.day(i,{width:"abbreviated",context:"formatting"});case"EEEEE":return e.day(i,{width:"narrow",context:"formatting"});case"EEEEEE":return e.day(i,{width:"short",context:"formatting"});default:return e.day(i,{width:"wide",context:"formatting"})}},e:function(t,n,e,i){var o=t.getUTCDay(),r=(o-i.weekStartsOn+8)%7||7;switch(n){case"e":return String(r);case"ee":return W(r,2);case"eo":return e.ordinalNumber(r,{unit:"day"});case"eee":return e.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return e.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return e.day(o,{width:"short",context:"formatting"});default:return e.day(o,{width:"wide",context:"formatting"})}},c:function(t,n,e,i){var o=t.getUTCDay(),r=(o-i.weekStartsOn+8)%7||7;switch(n){case"c":return String(r);case"cc":return W(r,n.length);case"co":return e.ordinalNumber(r,{unit:"day"});case"ccc":return e.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return e.day(o,{width:"narrow",context:"standalone"});case"cccccc":return e.day(o,{width:"short",context:"standalone"});default:return e.day(o,{width:"wide",context:"standalone"})}},i:function(t,n,e){var i=t.getUTCDay(),o=0===i?7:i;switch(n){case"i":return String(o);case"ii":return W(o,n.length);case"io":return e.ordinalNumber(o,{unit:"day"});case"iii":return e.day(i,{width:"abbreviated",context:"formatting"});case"iiiii":return e.day(i,{width:"narrow",context:"formatting"});case"iiiiii":return e.day(i,{width:"short",context:"formatting"});default:return e.day(i,{width:"wide",context:"formatting"})}},a:function(t,n,e){var i=t.getUTCHours()/12>=1?"pm":"am";switch(n){case"a":case"aa":return e.dayPeriod(i,{width:"abbreviated",context:"formatting"});case"aaa":return e.dayPeriod(i,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return e.dayPeriod(i,{width:"narrow",context:"formatting"});default:return e.dayPeriod(i,{width:"wide",context:"formatting"})}},b:function(t,n,e){var i,o=t.getUTCHours();switch(i=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",n){case"b":case"bb":return e.dayPeriod(i,{width:"abbreviated",context:"formatting"});case"bbb":return e.dayPeriod(i,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return e.dayPeriod(i,{width:"narrow",context:"formatting"});default:return e.dayPeriod(i,{width:"wide",context:"formatting"})}},B:function(t,n,e){var i,o=t.getUTCHours();switch(i=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",n){case"B":case"BB":case"BBB":return e.dayPeriod(i,{width:"abbreviated",context:"formatting"});case"BBBBB":return e.dayPeriod(i,{width:"narrow",context:"formatting"});default:return e.dayPeriod(i,{width:"wide",context:"formatting"})}},h:function(t,n,e){if("ho"===n){var i=t.getUTCHours()%12;return 0===i&&(i=12),e.ordinalNumber(i,{unit:"hour"})}return L(t,n)},H:function(t,n,e){return"Ho"===n?e.ordinalNumber(t.getUTCHours(),{unit:"hour"}):U(t,n)},K:function(t,n,e){var i=t.getUTCHours()%12;return"Ko"===n?e.ordinalNumber(i,{unit:"hour"}):W(i,n.length)},k:function(t,n,e){var i=t.getUTCHours();return 0===i&&(i=24),"ko"===n?e.ordinalNumber(i,{unit:"hour"}):W(i,n.length)},m:function(t,n,e){return"mo"===n?e.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):Y(t,n)},s:function(t,n,e){return"so"===n?e.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):_(t,n)},S:function(t,n){return O(t,n)},X:function(t,n,e,i){var o=(i._originalDate||t).getTimezoneOffset();if(0===o)return"Z";switch(n){case"X":return q(o);case"XXXX":case"XX":return R(o);default:return R(o,":")}},x:function(t,n,e,i){var o=(i._originalDate||t).getTimezoneOffset();switch(n){case"x":return q(o);case"xxxx":case"xx":return R(o);default:return R(o,":")}},O:function(t,n,e,i){var o=(i._originalDate||t).getTimezoneOffset();switch(n){case"O":case"OO":case"OOO":return"GMT"+H(o,":");default:return"GMT"+R(o,":")}},z:function(t,n,e,i){var o=(i._originalDate||t).getTimezoneOffset();switch(n){case"z":case"zz":case"zzz":return"GMT"+H(o,":");default:return"GMT"+R(o,":")}},t:function(t,n,e,i){var o=i._originalDate||t;return W(Math.floor(o.getTime()/1e3),n.length)},T:function(t,n,e,i){return W((i._originalDate||t).getTime(),n.length)}};function H(t,n){var e=t>0?"-":"+",i=Math.abs(t),o=Math.floor(i/60),r=i%60;if(0===r)return e+String(o);var a=n||"";return e+String(o)+a+W(r,2)}function q(t,n){return t%60==0?(t>0?"-":"+")+W(Math.abs(t)/60,2):R(t,n)}function R(t,n){var e=n||"",i=t>0?"-":"+",o=Math.abs(t);return i+W(Math.floor(o/60),2)+e+W(o%60,2)}const Z=V;var G=function(t,n){switch(t){case"P":return n.date({width:"short"});case"PP":return n.date({width:"medium"});case"PPP":return n.date({width:"long"});default:return n.date({width:"full"})}},J=function(t,n){switch(t){case"p":return n.time({width:"short"});case"pp":return n.time({width:"medium"});case"ppp":return n.time({width:"long"});default:return n.time({width:"full"})}};const X={p:J,P:function(t,n){var e,i=t.match(/(P+)(p+)?/)||[],o=i[1],r=i[2];if(!r)return G(t,n);switch(o){case"P":e=n.dateTime({width:"short"});break;case"PP":e=n.dateTime({width:"medium"});break;case"PPP":e=n.dateTime({width:"long"});break;default:e=n.dateTime({width:"full"})}return e.replace("{{date}}",G(o,n)).replace("{{time}}",J(r,n))}};var Q=["D","DD"],K=["YY","YYYY"];function $(t,n,e){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(n,"`) for formatting years to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(n,"`) for formatting years to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(n,"`) for formatting days of the month to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(n,"`) for formatting days of the month to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var tt={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function nt(t){return function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=n.width?String(n.width):t.defaultWidth;return t.formats[e]||t.formats[t.defaultWidth]}}const et={date:nt({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:nt({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:nt({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var it={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function ot(t){return function(n,e){var i;if("formatting"===(null!=e&&e.context?String(e.context):"standalone")&&t.formattingValues){var o=t.defaultFormattingWidth||t.defaultWidth,r=null!=e&&e.width?String(e.width):o;i=t.formattingValues[r]||t.formattingValues[o]}else{var a=t.defaultWidth,s=null!=e&&e.width?String(e.width):t.defaultWidth;i=t.values[s]||t.values[a]}return i[t.argumentCallback?t.argumentCallback(n):n]}}const rt={ordinalNumber:function(t,n){var e=Number(t),i=e%100;if(i>20||i<10)switch(i%10){case 1:return e+"st";case 2:return e+"nd";case 3:return e+"rd"}return e+"th"},era:ot({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:ot({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:ot({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:ot({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:ot({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function at(t){return function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=e.width,o=i&&t.matchPatterns[i]||t.matchPatterns[t.defaultMatchWidth],r=n.match(o);if(!r)return null;var a,s=r[0],d=i&&t.parsePatterns[i]||t.parsePatterns[t.defaultParseWidth],l=Array.isArray(d)?function(t,n){for(var e=0;e<t.length;e++)if(t[e].test(s))return e}(d):function(t,n){for(var e in t)if(t.hasOwnProperty(e)&&t[e].test(s))return e}(d);return a=t.valueCallback?t.valueCallback(l):l,{value:a=e.valueCallback?e.valueCallback(a):a,rest:n.slice(s.length)}}}var st,dt={ordinalNumber:(st={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=t.match(st.matchPattern);if(!e)return null;var i=e[0],o=t.match(st.parsePattern);if(!o)return null;var r=st.valueCallback?st.valueCallback(o[0]):o[0];return{value:r=n.valueCallback?n.valueCallback(r):r,rest:t.slice(i.length)}}),era:at({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:at({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:at({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:at({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:at({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const lt={code:"en-US",formatDistance:function(t,n,e){var i,o=tt[t];return i="string"==typeof o?o:1===n?o.one:o.other.replace("{{count}}",n.toString()),null!=e&&e.addSuffix?e.comparison&&e.comparison>0?"in "+i:i+" ago":i},formatLong:et,formatRelative:function(t,n,e,i){return it[t]},localize:rt,match:dt,options:{weekStartsOn:0,firstWeekContainsDate:1}};var At=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,ct=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ut=/^'([^]*?)'?$/,ht=/''/g,ft=/[a-zA-Z]/;function mt(t,n,e){var i,o,r,a,s,d,l,A,c,u,h,f,m,p,g,C,v,B;x(2,arguments);var y=String(n),b=k(),I=null!==(i=null!==(o=null==e?void 0:e.locale)&&void 0!==o?o:b.locale)&&void 0!==i?i:lt,T=E(null!==(r=null!==(a=null!==(s=null!==(d=null==e?void 0:e.firstWeekContainsDate)&&void 0!==d?d:null==e||null===(l=e.locale)||void 0===l||null===(A=l.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==s?s:b.firstWeekContainsDate)&&void 0!==a?a:null===(c=b.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==r?r:1);if(!(T>=1&&T<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var F=E(null!==(h=null!==(f=null!==(m=null!==(p=null==e?void 0:e.weekStartsOn)&&void 0!==p?p:null==e||null===(g=e.locale)||void 0===g||null===(C=g.options)||void 0===C?void 0:C.weekStartsOn)&&void 0!==m?m:b.weekStartsOn)&&void 0!==f?f:null===(v=b.locale)||void 0===v||null===(B=v.options)||void 0===B?void 0:B.weekStartsOn)&&void 0!==h?h:0);if(!(F>=0&&F<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!I.localize)throw new RangeError("locale must contain localize property");if(!I.formatLong)throw new RangeError("locale must contain formatLong property");var N=M(t);if(!function(t){if(x(1,arguments),!function(t){return x(1,arguments),t instanceof Date||"object"===w(t)&&"[object Date]"===Object.prototype.toString.call(t)}(t)&&"number"!=typeof t)return!1;var n=M(t);return!isNaN(Number(n))}(N))throw new RangeError("Invalid time value");var S=function(t){var n=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return n.setUTCFullYear(t.getFullYear()),t.getTime()-n.getTime()}(N),D=function(t,n){return x(2,arguments),function(t,n){x(2,arguments);var e=M(t).getTime(),i=E(n);return new Date(e+i)}(t,-E(n))}(N,S),W={firstWeekContainsDate:T,weekStartsOn:F,locale:I,_originalDate:N};return y.match(ct).map((function(t){var n=t[0];return"p"===n||"P"===n?(0,X[n])(t,I.formatLong):t})).join("").match(At).map((function(i){if("''"===i)return"'";var o,r,a=i[0];if("'"===a)return(r=(o=i).match(ut))?r[1].replace(ht,"'"):o;var s,d=Z[a];if(d)return null!=e&&e.useAdditionalWeekYearTokens||(s=i,-1===K.indexOf(s))||$(i,n,String(t)),null!=e&&e.useAdditionalDayOfYearTokens||!function(t){return-1!==Q.indexOf(t)}(i)||$(i,n,String(t)),d(D,i,I.localize,W);if(a.match(ft))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return i})).join("")}var pt=e(978),gt={};gt.styleTagTransform=u(),gt.setAttributes=d(),gt.insert=a().bind(null,"head"),gt.domAPI=o(),gt.insertStyleElement=A(),n()(pt.Z,gt),pt.Z&&pt.Z.locals&&pt.Z.locals;class Ct{constructor(){this.AddNoteInfoDiv=document.createElement("div"),this.AddNoteInfoDiv.classList.add("AddNoteInfoDiv"),this.AddNoteTitleInput=document.createElement("input"),this.AddNoteTitleInput.className="AddNoteTitleInput",this.AddNoteTitleInput.maxLength=10,this.AddNoteTitleInput.placeholder="Enter the Note Title",this.AddNoteBodyInput=document.createElement("textarea"),this.AddNoteBodyInput.classList.add("AddNoteBodyInput"),this.AddNoteBodyInput.placeholder="Add more info on the Note",this.DoneButton=document.createElement("button"),this.DoneButton.classList.add("DoneButton"),this.DoneButton.textContent="Add Note",this.noteButtons=document.createElement("div"),this.noteButtons.classList.add("noteButtons"),this.closeBtn=document.createElement("button"),this.closeBtn.classList.add("closeBtn"),this.closeBtn.textContent="Close",this.noteButtons.appendChild(this.closeBtn),this.noteButtons.appendChild(this.DoneButton),this.AddNoteInfoDiv.appendChild(this.AddNoteTitleInput),this.AddNoteInfoDiv.appendChild(this.AddNoteBodyInput),this.AddNoteInfoDiv.appendChild(this.noteButtons)}}const vt=e.p+"41909321ad151f328abe.svg",Bt=e.p+"a562587e2d2ca340c2cf.svg",yt=e.p+"ed3aa557713fa91a1066.svg";class bt{constructor(t,n,e,i,o,r,a){this.localStorageAccess=o,this.ViewEdit=new Ct,this.ViewEdit.AddNoteInfoDiv.style.visibility="hidden",this.ProjectTitle=t,this.ProjectDate=n,this.setupMasonry=a,this.AccessToMasorny=r,this.NoteBody=document.createElement("div"),this.NoteBody.classList.add("NoteBody"),this.NoteTitle=document.createElement("h2"),this.NoteTitle.classList.add("NoteTitle"),this.NoteTitle.textContent=e,this.NoteContent=document.createElement("div"),this.NoteContent.classList.add("NoteContent"),this.NoteContent.textContent=i,this.NoteButtonsDiv=document.createElement("div"),this.NoteButtonsDiv.classList.add("NoteButtonsDiv"),this.viewNotebutton=document.createElement("img"),this.viewNotebutton.classList.add("button"),this.viewNotebutton.src=yt,this.deleteNotebutton=document.createElement("img"),this.deleteNotebutton.classList.add("button"),this.deleteNotebutton.src=vt,this.deleteNotebutton.addEventListener("click",(()=>{this.removeSelfFromMasornyAndLocalStorage()})),this.editNotebutton=document.createElement("img"),this.editNotebutton.classList.add("button"),this.editNotebutton.src=Bt,this.NoteBody.appendChild(this.NoteTitle),this.NoteBody.appendChild(this.NoteContent),this.NoteButtonsDiv.appendChild(this.viewNotebutton),this.NoteButtonsDiv.appendChild(this.deleteNotebutton),this.NoteButtonsDiv.appendChild(this.editNotebutton),this.NoteBody.appendChild(this.NoteButtonsDiv),this.viewNotebutton.addEventListener("click",(()=>{this.VieWingNote()})),this.editNotebutton.addEventListener("click",(()=>{this.ViewEdit.AddNoteInfoDiv.style.visibility="visible"})),this.ViewEdit.closeBtn.addEventListener("click",(()=>{this.ViewEdit.AddNoteInfoDiv.style.visibility="hidden"})),this.ViewNote=document.createElement("div"),this.ViewNote.classList.add("ViewNote"),this.viewNoteTitle=document.createElement("h2"),this.viewNoteTitle.classList.add("viewNoteTitle"),this.viewNoteTitle.style.marginBottom="1em",this.viewNoteTitle.style.color="black",this.viewNoteTitle.textContent="Note",this.ViewNoteDoneButton=document.createElement("button"),this.ViewNoteDoneButton.classList.add("ViewNoteDoneButton"),this.ViewNoteDoneButton.textContent="close",this.ViewNoteBody=document.createElement("div"),this.ViewNoteBody.classList.add("ViewNoteBody"),this.ViewNote.appendChild(this.viewNoteTitle),this.ViewNote.appendChild(this.ViewNoteBody),this.ViewNote.appendChild(this.ViewNoteDoneButton),this.viewNotebutton.addEventListener("click",(()=>{this.ViewNote.style.visibility="visible",this.viewNoteTitle.textContent=this.NoteTitle.textContent,this.ViewNoteBody.textContent=this.NoteContent.textContent})),this.ViewNoteDoneButton.addEventListener("click",(()=>{this.ViewNote.style.visibility="hidden"})),this.AccessToMasorny.appendChild(this.ViewEdit.AddNoteInfoDiv),this.AccessToMasorny.appendChild(this.ViewNote),this.ViewEdit.DoneButton.addEventListener("click",(()=>{this.ViewEdit.AddNoteInfoDiv.style.visibility="hidden",this.NoteTitle.textContent=this.ViewEdit.AddNoteTitleInput.value,this.NoteContent.textContent=this.ViewEdit.AddNoteBodyInput.value;let t={title:this.ProjectTitle,date:this.ProjectDate},n=JSON.stringify(t),e=Object.keys(this.localStorageAccess);for(let t=0;t<e.length;t++)if(e[t]===n){let n=JSON.parse(this.localStorageAccess.getItem(e[t])),i=Object.keys(n);for(let t=0;t<i.length;t++)n[i[t]].title===this.NoteTitle.textContent&&(n[i[t]].title=this.NoteTitle.textContent,n[i[t]].content=this.NoteContent.textContent)}}))}removeSelfFromMasornyAndLocalStorage(){this.AccessToMasorny.removeChild(this.NoteBody),this.setupMasonry.layout();let t={title:this.ProjectTitle,date:this.ProjectDate},n=JSON.stringify(t),e=Object.keys(this.localStorageAccess);for(let t=0;t<e.length;t++)if(e[t]==n){let n=JSON.parse(this.localStorageAccess.getItem(e[t])),i=Object.keys(n);for(let t=0;t<i.length;t++)delete n[i[t]]}}EditingNote(){this.ViewEdit.AddNoteInfoDiv.style.visibility="visible"}}class It{constructor(t,n,i){this.AddNoteInfo=new Ct,this.AddNoteInfo.AddNoteInfoDiv.style.visibility="hidden",this.localStorage=i,this.title=t,this.date=n,this.MainAreaDiv=document.createElement("div"),this.MainAreaDiv.classList.add("MainArea"),this.MainAreaTitle=document.createElement("div"),this.MainAreaTitle.classList.add("MainAreaTitle"),this.proJectTitle=document.createElement("h1"),this.proJectTitle.style.fontSize="5rem",this.proJectTitle.style.marginBottom="0.5rem",this.projectDate=document.createElement("h3"),this.proJectTitle.textContent=t,this.projectDate.textContent="string"==typeof n?n:mt(n,"MMMM dd, yyyy"),this.MainAreaTitle.appendChild(this.proJectTitle),this.MainAreaTitle.appendChild(this.projectDate),this.MainAreaMasonry=document.createElement("div"),this.MainAreaMasonry.classList.add("MainAreaMasonry"),this.MainAreaMasonryGridArea=document.createElement("div"),this.MainAreaMasonryGridArea.classList.add("MainAreaMasonryGridArea"),this.NoteToAddNewNotes=document.createElement("div"),this.NoteToAddNewNotes.classList.add("NoteToAddNewNotes"),this.NoteToAddNewNotes.textContent="+",this.MainAreaMasonryGridArea.appendChild(this.NoteToAddNewNotes),this.notecount=0,this.NoteToAddNewNotes.addEventListener("click",(()=>{this.AddNoteInfo.AddNoteInfoDiv.style.visibility="visible",console.log("It works")})),this.AddNoteInfo.closeBtn.addEventListener("click",(()=>{this.AddNoteInfo.AddNoteInfoDiv.style.visibility="hidden"})),this.AddNoteInfo.DoneButton.addEventListener("click",(()=>{let t=new bt(this.title,this.date,this.AddNoteInfo.AddNoteTitleInput.value,this.AddNoteInfo.AddNoteBodyInput.value,this.localStorage,this.MainAreaMasonryGridArea,this.masonry);if(this.AddNoteInfo.AddNoteInfoDiv.style.visibility="hidden",console.log("It works"),this.MainAreaMasonryGridArea.childElementCount<=7){this.MainAreaMasonryGridArea.appendChild(t.NoteBody),this.masonry.appended(t.NoteBody),this.masonry.layout();let n={title:t.NoteTitle.textContent,content:t.NoteContent.textContent},e={title:this.proJectTitle.textContent,date:this.projectDate.textContent};if(void 0===this.localStorage[JSON.stringify(e)]){console.log(e.title+"Is undefined");let t={};t[`Note${this.notecount}`]=n,this.localStorage[JSON.stringify(e)]=JSON.stringify(t)}let i=JSON.parse(this.localStorage[JSON.stringify(e)]);i[`Note${this.notecount}`]=n,this.localStorage.setItem(JSON.stringify(e),JSON.stringify(i)),++this.notecount,console.log(this.localStorage)}console.log("You cant add more than 7 notes")}));let o=e(751);this.masonry=new o(this.MainAreaMasonryGridArea,{animate:!0,fitWidth:!0}),this.masonry.on("layoutComplete",(function(t){console.log("Masonry layout complete with "+t.length+" items")})),window.onload=()=>{this.masonry.layout()},this.credits=document.createElement("h5"),this.credits.textContent="Made by: Malicious Bunny",this.credits.style.marginTop="2rem",this.credits.style.marginBottom="2rem",this.credits.style.textAlign="center",this.MainAreaMasonry.appendChild(this.MainAreaMasonryGridArea),this.MainAreaDiv.appendChild(this.MainAreaTitle),this.MainAreaDiv.appendChild(this.MainAreaMasonry),this.MainAreaDiv.appendChild(this.credits),this.MainAreaDiv.appendChild(this.AddNoteInfo.AddNoteInfoDiv),this.restorePreviousNotesUnderProject()}restorePreviousNotesUnderProject(){let t={title:this.title,date:this.date},n=JSON.stringify(t),e=Object.keys(this.localStorage);for(let t=0;t<e.length;t++)if(e[t]===n){let n=JSON.parse(this.localStorage.getItem(e[t])),i=Object.keys(n);for(let t=0;t<i.length;t++){let e=new bt(this.title,this.date,n[i[t]].title,n[i[t]].content,this.localStorage,this.MainAreaMasonryGridArea,this.masonry);this.MainAreaMasonryGridArea.appendChild(e.NoteBody),this.masonry.appended(e.NoteBody),this.masonry.layout()}}}}class wt{constructor(t,n,e){this.localStorage=e,this.AccessToMainHtml=document.querySelector(".mainContent"),this.ParticularprojectDivision=document.createElement("div"),this.ParticularprojectDivision.setAttribute("class","ProjectDivision"),this.formattedDate=mt(new Date(n),"MMMM dd, yyyy"),this.unformattedDate=n,this.projectTitle=document.createElement("h5"),this.projectTitle.setAttribute("class","ProjectTitle"),this.projectTitle.innerHTML=t,this.ParticularprojectDivision.appendChild(this.projectTitle),console.log(`New project ${t} created`),this.date=n,this.ParticularprojectDivision.addEventListener("click",(()=>{this.SetUpMainAreaForNotes()}))}addProjectSub(){return this.ParticularprojectDivision}SetUpMainAreaForNotes(){this.AccessToMainHtml.removeChild(this.AccessToMainHtml.childNodes[1]);let t=new It(this.projectTitle.innerHTML,this.unformattedDate,this.localStorage);this.AccessToMainHtml.appendChild(t.MainAreaDiv),t.masonry.layout()}}const xt=e.p+"be6509ef608c8d2d02f5.svg",Mt=e.p+"8f78f6e6b845064dfd00.svg";let Et=new class{constructor(){this.InfoModal=new y,this.InfoModal.ModalDiv.style.visibility="hidden",this.localStorage=window.localStorage,this.Panelelement=document.createElement("div"),this.Panelelement.setAttribute("id","panel"),this.Paneltitle=document.createElement("h5"),this.Paneltitle.setAttribute("id","panel-title"),this.Paneltitle.innerHTML="Projects",this.Paneltitle.style.color="black",this.Paneltitle.style.fontWeight="bold",this.Paneltitle.style.fontSize="1em",this.Paneltitle.style.marginBottom="0.5em",this.Panelelement.appendChild(this.Paneltitle),this.AddProjectButton=document.createElement("button"),this.AddProjectButton.setAttribute("id","AddProjectButton");let t=document.createElement("span");t.innerHTML="Add",t.style.fontSize="1.3em",t.style.color="white";let n=document.createElement("img");n.src=Mt,n.setAttribute("id","btn-icon"),n.style.fill="white",this.AddProjectButton.addEventListener("mouseover",(()=>{n.src=xt})),this.AddProjectButton.addEventListener("mouseout",(()=>{n.src=Mt})),this.AddProjectButton.appendChild(n),this.Panelelement.appendChild(this.AddProjectButton),this.PanelContent=document.createElement("div"),this.PanelContent.setAttribute("id","panel-content"),this.Panelelement.appendChild(this.PanelContent),this.AddProjectButton.addEventListener("click",(()=>{this.InfoModal.ModalDiv.style.visibility="visible"})),this.InfoModal.closeBtn.addEventListener("click",(()=>{this.InfoModal.ModalDiv.style.visibility="hidden"})),this.InfoModal.AddButton.addEventListener("click",(()=>{this.InfoModal.ModalDiv.style.visibility="hidden";let t=new wt(this.InfoModal.ModalTitleArea.value,this.InfoModal.ModalDueDateArea.value,this.localStorage),n={title:this.InfoModal.ModalTitleArea.value,date:this.InfoModal.ModalDueDateArea.value};void 0===this.localStorage[JSON.stringify(n)]&&this.localStorage.setItem(JSON.stringify(n),JSON.stringify({})),this.PanelContent.appendChild(t.addProjectSub()),this.InfoModal.ModalDiv.style.display="none"})),this.logodiv=document.createElement("div"),this.logodiv.setAttribute("id","logo-div"),this.logolink=document.createElement("a"),this.logolink.setAttribute("class","Btn"),this.logolink.setAttribute("href","https://github.com/Malicious-Bunny"),this.logolink.innerHTML='\n        <span class="svgContainer">\n          <svg fill="white" viewBox="0 0 496 512" height="1.6em"><path d="M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z"></path></svg>\n        </span>\n        <span class="BG"></span>',this.logodiv.appendChild(this.logolink),this.Panelelement.appendChild(this.logodiv),this.Panelelement.appendChild(this.InfoModal.ModalDiv),this.restorePreviousProjects()}restorePreviousProjects(){let t=Object.keys(this.localStorage);for(let n=0;n<t.length;n++){console.log(t[n]);let e=new wt(JSON.parse(t[n]).title,JSON.parse(t[n]).date,this.localStorage);this.PanelContent.appendChild(e.addProjectSub())}}},Tt=document.createElement("Div"),Ft=document.querySelector(".mainContent");Tt.classList.add("Welcome");let Nt=document.createElement("h1");Nt.textContent="Welcome to BlueNote",Tt.appendChild(Nt),Ft.appendChild(Et.Panelelement),Ft.appendChild(Tt)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,